//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 Chunky.g 2011-09-09 01:29:13

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  Chunky 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ChunkyParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPER", "ARGS", "ASSIGN", "BLOCK", "CALL", "COMMA", "DAMPER", "DIGIT", "DOT", "DPIPE", "EQUAL", "FALSE", "FLOAT", "FUNC", "GREATER", "GREATEREQUAL", "ID", "IF", "INT", "LCURLY", "LESS", "LESSEQUAL", "LETTER", "LPAREN", "MINUS", "NOTEQUAL", "PARAMS", "PERCENT", "PIPE", "PLUS", "RCURLY", "RPAREN", "SEMI", "SLASH", "STAR", "STRING", "TRUE", "WS", "'!'", "'else'"
	};
	public const int EOF=-1;
	public const int AMPER=4;
	public const int ARGS=5;
	public const int ASSIGN=6;
	public const int BLOCK=7;
	public const int CALL=8;
	public const int COMMA=9;
	public const int DAMPER=10;
	public const int DIGIT=11;
	public const int DOT=12;
	public const int DPIPE=13;
	public const int EQUAL=14;
	public const int FALSE=15;
	public const int FLOAT=16;
	public const int FUNC=17;
	public const int GREATER=18;
	public const int GREATEREQUAL=19;
	public const int ID=20;
	public const int IF=21;
	public const int INT=22;
	public const int LCURLY=23;
	public const int LESS=24;
	public const int LESSEQUAL=25;
	public const int LETTER=26;
	public const int LPAREN=27;
	public const int MINUS=28;
	public const int NOTEQUAL=29;
	public const int PARAMS=30;
	public const int PERCENT=31;
	public const int PIPE=32;
	public const int PLUS=33;
	public const int RCURLY=34;
	public const int RPAREN=35;
	public const int SEMI=36;
	public const int SLASH=37;
	public const int STAR=38;
	public const int STRING=39;
	public const int TRUE=40;
	public const int WS=41;
	public const int T__42=42;
	public const int T__43=43;

	// delegates
	// delegators

	public ChunkyParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public ChunkyParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return ChunkyParser.tokenNames; } }
	public override string GrammarFileName { get { return "Chunky.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class program_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public program_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_program();
	partial void LeaveRule_program();

	// $ANTLR start "program"
	// Chunky.g:19:8: public program : exprs ;
	[GrammarRule("program")]
	public ChunkyParser.program_return program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
		ChunkyParser.program_return retval = new ChunkyParser.program_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		ChunkyParser.exprs_return exprs1 = default(ChunkyParser.exprs_return);


		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(19, 1);
		try
		{
			// Chunky.g:20:2: ( exprs )
			DebugEnterAlt(1);
			// Chunky.g:20:4: exprs
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(20, 4);
			PushFollow(Follow._exprs_in_program81);
			exprs1=exprs();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, exprs1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
		}
		DebugLocation(21, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		return retval;

	}
	// $ANTLR end "program"

	private sealed partial class params_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public params_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_params();
	partial void LeaveRule_params();

	// $ANTLR start "params"
	// Chunky.g:23:1: params : (p+= ID ( ',' p+= ID )* )? -> ^( PARAMS ( $p)* ) ;
	[GrammarRule("params")]
	private ChunkyParser.params_return @params()
	{
		EnterRule_params();
		EnterRule("params", 2);
		TraceIn("params", 2);
		ChunkyParser.params_return retval = new ChunkyParser.params_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal2 = default(IToken);
		IToken p = default(IToken);
		List<IToken> list_p = null;

		CommonTree char_literal2_tree = default(CommonTree);
		CommonTree p_tree = default(CommonTree);
		RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");

		try { DebugEnterRule(GrammarFileName, "params");
		DebugLocation(23, 1);
		try
		{
			// Chunky.g:24:2: ( (p+= ID ( ',' p+= ID )* )? -> ^( PARAMS ( $p)* ) )
			DebugEnterAlt(1);
			// Chunky.g:24:4: (p+= ID ( ',' p+= ID )* )?
			{
			DebugLocation(24, 4);
			// Chunky.g:24:4: (p+= ID ( ',' p+= ID )* )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==ID))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:24:5: p+= ID ( ',' p+= ID )*
				{
				DebugLocation(24, 6);
				p=(IToken)Match(input,ID,Follow._ID_in_params95); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_ID.Add(p);

				if (list_p==null) list_p=new List<IToken>();
				list_p.Add(p);

				DebugLocation(24, 11);
				// Chunky.g:24:11: ( ',' p+= ID )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, false);
					int LA1_0 = input.LA(1);

					if ((LA1_0==COMMA))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:24:12: ',' p+= ID
						{
						DebugLocation(24, 12);
						char_literal2=(IToken)Match(input,COMMA,Follow._COMMA_in_params98); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(char_literal2);

						DebugLocation(24, 17);
						p=(IToken)Match(input,ID,Follow._ID_in_params102); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_ID.Add(p);

						if (list_p==null) list_p=new List<IToken>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				}
				break;

			}
			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: retval
			// token list labels: p
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 25:3: -> ^( PARAMS ( $p)* )
			{
				DebugLocation(25, 6);
				// Chunky.g:25:6: ^( PARAMS ( $p)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(25, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

				DebugLocation(25, 16);
				// Chunky.g:25:16: ( $p)*
				while ( stream_p.HasNext )
				{
					DebugLocation(25, 16);
					adaptor.AddChild(root_1, stream_p.NextNode());

				}
				stream_p.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("params", 2);
			LeaveRule("params", 2);
			LeaveRule_params();
		}
		DebugLocation(26, 1);
		} finally { DebugExitRule(GrammarFileName, "params"); }
		return retval;

	}
	// $ANTLR end "params"

	private sealed partial class func_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public func_expr_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_func_expr();
	partial void LeaveRule_func_expr();

	// $ANTLR start "func_expr"
	// Chunky.g:28:1: func_expr : FUNC '(' params ')' block ;
	[GrammarRule("func_expr")]
	private ChunkyParser.func_expr_return func_expr()
	{
		EnterRule_func_expr();
		EnterRule("func_expr", 3);
		TraceIn("func_expr", 3);
		ChunkyParser.func_expr_return retval = new ChunkyParser.func_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken FUNC3 = default(IToken);
		IToken char_literal4 = default(IToken);
		IToken char_literal6 = default(IToken);
		ChunkyParser.params_return params5 = default(ChunkyParser.params_return);
		ChunkyParser.block_return block7 = default(ChunkyParser.block_return);

		CommonTree FUNC3_tree = default(CommonTree);
		CommonTree char_literal4_tree = default(CommonTree);
		CommonTree char_literal6_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "func_expr");
		DebugLocation(28, 1);
		try
		{
			// Chunky.g:29:2: ( FUNC '(' params ')' block )
			DebugEnterAlt(1);
			// Chunky.g:29:4: FUNC '(' params ')' block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(29, 8);
			FUNC3=(IToken)Match(input,FUNC,Follow._FUNC_in_func_expr129); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FUNC3_tree = (CommonTree)adaptor.Create(FUNC3);
			root_0 = (CommonTree)adaptor.BecomeRoot(FUNC3_tree, root_0);
			}
			DebugLocation(29, 13);
			char_literal4=(IToken)Match(input,LPAREN,Follow._LPAREN_in_func_expr132); if (state.failed) return retval;
			DebugLocation(29, 15);
			PushFollow(Follow._params_in_func_expr135);
			params5=@params();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, params5.Tree);
			DebugLocation(29, 25);
			char_literal6=(IToken)Match(input,RPAREN,Follow._RPAREN_in_func_expr137); if (state.failed) return retval;
			DebugLocation(29, 27);
			PushFollow(Follow._block_in_func_expr140);
			block7=block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, block7.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_expr", 3);
			LeaveRule("func_expr", 3);
			LeaveRule_func_expr();
		}
		DebugLocation(30, 1);
		} finally { DebugExitRule(GrammarFileName, "func_expr"); }
		return retval;

	}
	// $ANTLR end "func_expr"

	private sealed partial class if_expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public if_expr_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_if_expr();
	partial void LeaveRule_if_expr();

	// $ANTLR start "if_expr"
	// Chunky.g:32:1: if_expr : IF '(' cond= expr ')' '{' ( (cons_exps+= expr )? ';' )* '}' ( 'else' (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) ) | -> ^( IF $cond ( $cons_exps)* ) ) ;
	[GrammarRule("if_expr")]
	private ChunkyParser.if_expr_return if_expr()
	{
		EnterRule_if_expr();
		EnterRule("if_expr", 4);
		TraceIn("if_expr", 4);
		ChunkyParser.if_expr_return retval = new ChunkyParser.if_expr_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IF8 = default(IToken);
		IToken char_literal9 = default(IToken);
		IToken char_literal10 = default(IToken);
		IToken char_literal11 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken string_literal14 = default(IToken);
		IToken char_literal15 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken char_literal17 = default(IToken);
		List<CommonTree> list_cons_exps = null;
		List<CommonTree> list_alt_exps = null;
		ChunkyParser.expr_return cond = default(ChunkyParser.expr_return);
		ChunkyParser.if_expr_return alt_if = default(ChunkyParser.if_expr_return);
		ChunkyParser.expr_return cons_exps = default(ChunkyParser.expr_return);
		ChunkyParser.expr_return alt_exps = default(ChunkyParser.expr_return);
		CommonTree IF8_tree = default(CommonTree);
		CommonTree char_literal9_tree = default(CommonTree);
		CommonTree char_literal10_tree = default(CommonTree);
		CommonTree char_literal11_tree = default(CommonTree);
		CommonTree char_literal12_tree = default(CommonTree);
		CommonTree char_literal13_tree = default(CommonTree);
		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree char_literal15_tree = default(CommonTree);
		CommonTree char_literal16_tree = default(CommonTree);
		CommonTree char_literal17_tree = default(CommonTree);
		RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleITokenStream stream_LCURLY=new RewriteRuleITokenStream(adaptor,"token LCURLY");
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleITokenStream stream_RCURLY=new RewriteRuleITokenStream(adaptor,"token RCURLY");
		RewriteRuleITokenStream stream_43=new RewriteRuleITokenStream(adaptor,"token 43");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_if_expr=new RewriteRuleSubtreeStream(adaptor,"rule if_expr");
		try { DebugEnterRule(GrammarFileName, "if_expr");
		DebugLocation(32, 1);
		try
		{
			// Chunky.g:33:2: ( IF '(' cond= expr ')' '{' ( (cons_exps+= expr )? ';' )* '}' ( 'else' (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) ) | -> ^( IF $cond ( $cons_exps)* ) ) )
			DebugEnterAlt(1);
			// Chunky.g:33:4: IF '(' cond= expr ')' '{' ( (cons_exps+= expr )? ';' )* '}' ( 'else' (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) ) | -> ^( IF $cond ( $cons_exps)* ) )
			{
			DebugLocation(33, 4);
			IF8=(IToken)Match(input,IF,Follow._IF_in_if_expr151); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_IF.Add(IF8);

			DebugLocation(33, 7);
			char_literal9=(IToken)Match(input,LPAREN,Follow._LPAREN_in_if_expr153); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LPAREN.Add(char_literal9);

			DebugLocation(33, 15);
			PushFollow(Follow._expr_in_if_expr157);
			cond=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(cond.Tree);
			DebugLocation(33, 21);
			char_literal10=(IToken)Match(input,RPAREN,Follow._RPAREN_in_if_expr159); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RPAREN.Add(char_literal10);

			DebugLocation(33, 25);
			char_literal11=(IToken)Match(input,LCURLY,Follow._LCURLY_in_if_expr161); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_LCURLY.Add(char_literal11);

			DebugLocation(33, 29);
			// Chunky.g:33:29: ( (cons_exps+= expr )? ';' )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>=FALSE && LA4_0<=FUNC)||(LA4_0>=ID && LA4_0<=INT)||LA4_0==LPAREN||LA4_0==SEMI||(LA4_0>=STRING && LA4_0<=TRUE)||LA4_0==42))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:33:30: (cons_exps+= expr )? ';'
					{
					DebugLocation(33, 39);
					// Chunky.g:33:39: (cons_exps+= expr )?
					int alt3=2;
					try { DebugEnterSubRule(3);
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if (((LA3_0>=FALSE && LA3_0<=FUNC)||(LA3_0>=ID && LA3_0<=INT)||LA3_0==LPAREN||(LA3_0>=STRING && LA3_0<=TRUE)||LA3_0==42))
					{
						alt3 = 1;
					}
					} finally { DebugExitDecision(3); }
					switch (alt3)
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:33:39: cons_exps+= expr
						{
						DebugLocation(33, 39);
						PushFollow(Follow._expr_in_if_expr166);
						cons_exps=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(cons_exps.Tree);
						if (list_cons_exps==null) list_cons_exps=new List<CommonTree>();
						list_cons_exps.Add(cons_exps.Tree);


						}
						break;

					}
					} finally { DebugExitSubRule(3); }

					DebugLocation(33, 47);
					char_literal12=(IToken)Match(input,SEMI,Follow._SEMI_in_if_expr169); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(char_literal12);


					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(33, 53);
			char_literal13=(IToken)Match(input,RCURLY,Follow._RCURLY_in_if_expr173); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_RCURLY.Add(char_literal13);

			DebugLocation(34, 3);
			// Chunky.g:34:3: ( 'else' (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) ) | -> ^( IF $cond ( $cons_exps)* ) )
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==43))
			{
				alt8 = 1;
			}
			else if ((LA8_0==AMPER||LA8_0==ASSIGN||(LA8_0>=COMMA && LA8_0<=DAMPER)||(LA8_0>=DOT && LA8_0<=EQUAL)||(LA8_0>=GREATER && LA8_0<=GREATEREQUAL)||(LA8_0>=LESS && LA8_0<=LESSEQUAL)||(LA8_0>=LPAREN && LA8_0<=NOTEQUAL)||(LA8_0>=PERCENT && LA8_0<=PLUS)||(LA8_0>=RPAREN && LA8_0<=STAR)))
			{
				alt8 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:34:5: 'else' (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) )
				{
				DebugLocation(34, 5);
				string_literal14=(IToken)Match(input,43,Follow._43_in_if_expr179); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_43.Add(string_literal14);

				DebugLocation(34, 12);
				// Chunky.g:34:12: (alt_if= if_expr -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if) | '{' ( (alt_exps+= expr )? ';' )* '}' -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) ) )
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==IF))
				{
					alt7 = 1;
				}
				else if ((LA7_0==LCURLY))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:34:14: alt_if= if_expr
					{
					DebugLocation(34, 20);
					PushFollow(Follow._if_expr_in_if_expr185);
					alt_if=if_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_if_expr.Add(alt_if.Tree);


					{
					// AST REWRITE
					// elements: IF, cond, cons_exps, alt_if
					// token labels: 
					// rule labels: cond, alt_if, retval
					// token list labels: 
					// rule list labels: cons_exps
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);
					RewriteRuleSubtreeStream stream_alt_if=new RewriteRuleSubtreeStream(adaptor,"rule alt_if",alt_if!=null?alt_if.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_cons_exps=new RewriteRuleSubtreeStream(adaptor,"token cons_exps",list_cons_exps);
					root_0 = (CommonTree)adaptor.Nil();
					// 34:34: -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if)
					{
						DebugLocation(34, 37);
						// Chunky.g:34:37: ^( IF $cond ^( BLOCK ( $cons_exps)* ) $alt_if)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(34, 39);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(34, 43);
						adaptor.AddChild(root_1, stream_cond.NextTree());
						DebugLocation(34, 48);
						// Chunky.g:34:48: ^( BLOCK ( $cons_exps)* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(34, 50);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_2);

						DebugLocation(34, 57);
						// Chunky.g:34:57: ( $cons_exps)*
						while ( stream_cons_exps.HasNext )
						{
							DebugLocation(34, 57);
							adaptor.AddChild(root_2, stream_cons_exps.NextTree());

						}
						stream_cons_exps.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(34, 70);
						adaptor.AddChild(root_1, stream_alt_if.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Chunky.g:35:8: '{' ( (alt_exps+= expr )? ';' )* '}'
					{
					DebugLocation(35, 8);
					char_literal15=(IToken)Match(input,LCURLY,Follow._LCURLY_in_if_expr219); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LCURLY.Add(char_literal15);

					DebugLocation(35, 12);
					// Chunky.g:35:12: ( (alt_exps+= expr )? ';' )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if (((LA6_0>=FALSE && LA6_0<=FUNC)||(LA6_0>=ID && LA6_0<=INT)||LA6_0==LPAREN||LA6_0==SEMI||(LA6_0>=STRING && LA6_0<=TRUE)||LA6_0==42))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// Chunky.g:35:13: (alt_exps+= expr )? ';'
							{
							DebugLocation(35, 21);
							// Chunky.g:35:21: (alt_exps+= expr )?
							int alt5=2;
							try { DebugEnterSubRule(5);
							try { DebugEnterDecision(5, false);
							int LA5_0 = input.LA(1);

							if (((LA5_0>=FALSE && LA5_0<=FUNC)||(LA5_0>=ID && LA5_0<=INT)||LA5_0==LPAREN||(LA5_0>=STRING && LA5_0<=TRUE)||LA5_0==42))
							{
								alt5 = 1;
							}
							} finally { DebugExitDecision(5); }
							switch (alt5)
							{
							case 1:
								DebugEnterAlt(1);
								// Chunky.g:35:21: alt_exps+= expr
								{
								DebugLocation(35, 21);
								PushFollow(Follow._expr_in_if_expr224);
								alt_exps=expr();
								PopFollow();
								if (state.failed) return retval;
								if (state.backtracking == 0) stream_expr.Add(alt_exps.Tree);
								if (list_alt_exps==null) list_alt_exps=new List<CommonTree>();
								list_alt_exps.Add(alt_exps.Tree);


								}
								break;

							}
							} finally { DebugExitSubRule(5); }

							DebugLocation(35, 29);
							char_literal16=(IToken)Match(input,SEMI,Follow._SEMI_in_if_expr227); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_SEMI.Add(char_literal16);


							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(35, 35);
					char_literal17=(IToken)Match(input,RCURLY,Follow._RCURLY_in_if_expr231); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RCURLY.Add(char_literal17);



					{
					// AST REWRITE
					// elements: IF, cond, cons_exps, alt_exps
					// token labels: 
					// rule labels: cond, retval
					// token list labels: 
					// rule list labels: cons_exps, alt_exps
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_cons_exps=new RewriteRuleSubtreeStream(adaptor,"token cons_exps",list_cons_exps);
					RewriteRuleSubtreeStream stream_alt_exps=new RewriteRuleSubtreeStream(adaptor,"token alt_exps",list_alt_exps);
					root_0 = (CommonTree)adaptor.Nil();
					// 35:40: -> ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) )
					{
						DebugLocation(35, 43);
						// Chunky.g:35:43: ^( IF $cond ^( BLOCK ( $cons_exps)* ) ^( BLOCK ( $alt_exps)* ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(35, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

						DebugLocation(35, 49);
						adaptor.AddChild(root_1, stream_cond.NextTree());
						DebugLocation(35, 54);
						// Chunky.g:35:54: ^( BLOCK ( $cons_exps)* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(35, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_2);

						DebugLocation(35, 63);
						// Chunky.g:35:63: ( $cons_exps)*
						while ( stream_cons_exps.HasNext )
						{
							DebugLocation(35, 63);
							adaptor.AddChild(root_2, stream_cons_exps.NextTree());

						}
						stream_cons_exps.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(35, 75);
						// Chunky.g:35:75: ^( BLOCK ( $alt_exps)* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(35, 77);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_2);

						DebugLocation(35, 84);
						// Chunky.g:35:84: ( $alt_exps)*
						while ( stream_alt_exps.HasNext )
						{
							DebugLocation(35, 84);
							adaptor.AddChild(root_2, stream_alt_exps.NextTree());

						}
						stream_alt_exps.Reset();

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(7); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Chunky.g:37:16: 
				{

				{
				// AST REWRITE
				// elements: IF, cond, cons_exps
				// token labels: 
				// rule labels: cond, retval
				// token list labels: 
				// rule list labels: cons_exps
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_cons_exps=new RewriteRuleSubtreeStream(adaptor,"token cons_exps",list_cons_exps);
				root_0 = (CommonTree)adaptor.Nil();
				// 37:16: -> ^( IF $cond ( $cons_exps)* )
				{
					DebugLocation(37, 19);
					// Chunky.g:37:19: ^( IF $cond ( $cons_exps)* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(37, 21);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

					DebugLocation(37, 25);
					adaptor.AddChild(root_1, stream_cond.NextTree());
					DebugLocation(37, 31);
					// Chunky.g:37:31: ( $cons_exps)*
					while ( stream_cons_exps.HasNext )
					{
						DebugLocation(37, 31);
						adaptor.AddChild(root_1, stream_cons_exps.NextTree());

					}
					stream_cons_exps.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if_expr", 4);
			LeaveRule("if_expr", 4);
			LeaveRule_if_expr();
		}
		DebugLocation(39, 1);
		} finally { DebugExitRule(GrammarFileName, "if_expr"); }
		return retval;

	}
	// $ANTLR end "if_expr"

	private sealed partial class term_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public term_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_term();
	partial void LeaveRule_term();

	// $ANTLR start "term"
	// Chunky.g:41:1: term : ( ID | '(' expr ')' | INT | FLOAT | TRUE | FALSE | STRING | if_expr | func_expr );
	[GrammarRule("term")]
	private ChunkyParser.term_return term()
	{
		EnterRule_term();
		EnterRule("term", 5);
		TraceIn("term", 5);
		ChunkyParser.term_return retval = new ChunkyParser.term_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken ID18 = default(IToken);
		IToken char_literal19 = default(IToken);
		IToken char_literal21 = default(IToken);
		IToken INT22 = default(IToken);
		IToken FLOAT23 = default(IToken);
		IToken TRUE24 = default(IToken);
		IToken FALSE25 = default(IToken);
		IToken STRING26 = default(IToken);
		ChunkyParser.expr_return expr20 = default(ChunkyParser.expr_return);
		ChunkyParser.if_expr_return if_expr27 = default(ChunkyParser.if_expr_return);
		ChunkyParser.func_expr_return func_expr28 = default(ChunkyParser.func_expr_return);

		CommonTree ID18_tree = default(CommonTree);
		CommonTree char_literal19_tree = default(CommonTree);
		CommonTree char_literal21_tree = default(CommonTree);
		CommonTree INT22_tree = default(CommonTree);
		CommonTree FLOAT23_tree = default(CommonTree);
		CommonTree TRUE24_tree = default(CommonTree);
		CommonTree FALSE25_tree = default(CommonTree);
		CommonTree STRING26_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(41, 1);
		try
		{
			// Chunky.g:41:5: ( ID | '(' expr ')' | INT | FLOAT | TRUE | FALSE | STRING | if_expr | func_expr )
			int alt9=9;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case ID:
				{
				alt9 = 1;
				}
				break;
			case LPAREN:
				{
				alt9 = 2;
				}
				break;
			case INT:
				{
				alt9 = 3;
				}
				break;
			case FLOAT:
				{
				alt9 = 4;
				}
				break;
			case TRUE:
				{
				alt9 = 5;
				}
				break;
			case FALSE:
				{
				alt9 = 6;
				}
				break;
			case STRING:
				{
				alt9 = 7;
				}
				break;
			case IF:
				{
				alt9 = 8;
				}
				break;
			case FUNC:
				{
				alt9 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:41:7: ID
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(41, 7);
				ID18=(IToken)Match(input,ID,Follow._ID_in_term305); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ID18_tree = (CommonTree)adaptor.Create(ID18);
				adaptor.AddChild(root_0, ID18_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Chunky.g:42:4: '(' expr ')'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(42, 7);
				char_literal19=(IToken)Match(input,LPAREN,Follow._LPAREN_in_term310); if (state.failed) return retval;
				DebugLocation(42, 9);
				PushFollow(Follow._expr_in_term313);
				expr20=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr20.Tree);
				DebugLocation(42, 17);
				char_literal21=(IToken)Match(input,RPAREN,Follow._RPAREN_in_term315); if (state.failed) return retval;

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Chunky.g:43:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(43, 4);
				INT22=(IToken)Match(input,INT,Follow._INT_in_term321); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INT22_tree = (CommonTree)adaptor.Create(INT22);
				adaptor.AddChild(root_0, INT22_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Chunky.g:44:4: FLOAT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(44, 4);
				FLOAT23=(IToken)Match(input,FLOAT,Follow._FLOAT_in_term326); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FLOAT23_tree = (CommonTree)adaptor.Create(FLOAT23);
				adaptor.AddChild(root_0, FLOAT23_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Chunky.g:45:4: TRUE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(45, 4);
				TRUE24=(IToken)Match(input,TRUE,Follow._TRUE_in_term331); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE24_tree = (CommonTree)adaptor.Create(TRUE24);
				adaptor.AddChild(root_0, TRUE24_tree);
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Chunky.g:46:4: FALSE
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(46, 4);
				FALSE25=(IToken)Match(input,FALSE,Follow._FALSE_in_term336); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE25_tree = (CommonTree)adaptor.Create(FALSE25);
				adaptor.AddChild(root_0, FALSE25_tree);
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Chunky.g:47:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(47, 4);
				STRING26=(IToken)Match(input,STRING,Follow._STRING_in_term341); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING26_tree = (CommonTree)adaptor.Create(STRING26);
				adaptor.AddChild(root_0, STRING26_tree);
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Chunky.g:48:4: if_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(48, 4);
				PushFollow(Follow._if_expr_in_term346);
				if_expr27=if_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, if_expr27.Tree);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Chunky.g:49:4: func_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(49, 4);
				PushFollow(Follow._func_expr_in_term351);
				func_expr28=func_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_expr28.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 5);
			LeaveRule("term", 5);
			LeaveRule_term();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return retval;

	}
	// $ANTLR end "term"

	private sealed partial class dot_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public dot_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_dot();
	partial void LeaveRule_dot();

	// $ANTLR start "dot"
	// Chunky.g:52:1: dot : term ( DOT ID )* ( '=' expr )? ;
	[GrammarRule("dot")]
	private ChunkyParser.dot_return dot()
	{
		EnterRule_dot();
		EnterRule("dot", 6);
		TraceIn("dot", 6);
		ChunkyParser.dot_return retval = new ChunkyParser.dot_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken DOT30 = default(IToken);
		IToken ID31 = default(IToken);
		IToken char_literal32 = default(IToken);
		ChunkyParser.term_return term29 = default(ChunkyParser.term_return);
		ChunkyParser.expr_return expr33 = default(ChunkyParser.expr_return);

		CommonTree DOT30_tree = default(CommonTree);
		CommonTree ID31_tree = default(CommonTree);
		CommonTree char_literal32_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "dot");
		DebugLocation(52, 1);
		try
		{
			// Chunky.g:53:2: ( term ( DOT ID )* ( '=' expr )? )
			DebugEnterAlt(1);
			// Chunky.g:53:4: term ( DOT ID )* ( '=' expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(53, 4);
			PushFollow(Follow._term_in_dot362);
			term29=term();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, term29.Tree);
			DebugLocation(53, 9);
			// Chunky.g:53:9: ( DOT ID )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==DOT))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:53:10: DOT ID
					{
					DebugLocation(53, 13);
					DOT30=(IToken)Match(input,DOT,Follow._DOT_in_dot365); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DOT30_tree = (CommonTree)adaptor.Create(DOT30);
					root_0 = (CommonTree)adaptor.BecomeRoot(DOT30_tree, root_0);
					}
					DebugLocation(53, 15);
					ID31=(IToken)Match(input,ID,Follow._ID_in_dot368); if (state.failed) return retval;
					if (state.backtracking == 0) {
					ID31_tree = (CommonTree)adaptor.Create(ID31);
					adaptor.AddChild(root_0, ID31_tree);
					}

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }

			DebugLocation(54, 3);
			// Chunky.g:54:3: ( '=' expr )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, false);
			int LA11_0 = input.LA(1);

			if ((LA11_0==ASSIGN))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:54:4: '=' expr
				{
				DebugLocation(54, 7);
				char_literal32=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_dot376); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal32_tree = (CommonTree)adaptor.Create(char_literal32);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal32_tree, root_0);
				}
				DebugLocation(54, 9);
				PushFollow(Follow._expr_in_dot379);
				expr33=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr33.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot", 6);
			LeaveRule("dot", 6);
			LeaveRule_dot();
		}
		DebugLocation(55, 1);
		} finally { DebugExitRule(GrammarFileName, "dot"); }
		return retval;

	}
	// $ANTLR end "dot"

	private sealed partial class args_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public args_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_args();
	partial void LeaveRule_args();

	// $ANTLR start "args"
	// Chunky.g:57:1: args : (b= expr ( ',' b= expr )* )? -> ^( ARGS $b) ;
	[GrammarRule("args")]
	private ChunkyParser.args_return args()
	{
		EnterRule_args();
		EnterRule("args", 7);
		TraceIn("args", 7);
		ChunkyParser.args_return retval = new ChunkyParser.args_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal34 = default(IToken);
		ChunkyParser.expr_return b = default(ChunkyParser.expr_return);

		CommonTree char_literal34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(57, 1);
		try
		{
			// Chunky.g:57:5: ( (b= expr ( ',' b= expr )* )? -> ^( ARGS $b) )
			DebugEnterAlt(1);
			// Chunky.g:57:7: (b= expr ( ',' b= expr )* )?
			{
			DebugLocation(57, 7);
			// Chunky.g:57:7: (b= expr ( ',' b= expr )* )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_0 = input.LA(1);

			if (((LA13_0>=FALSE && LA13_0<=FUNC)||(LA13_0>=ID && LA13_0<=INT)||LA13_0==LPAREN||(LA13_0>=STRING && LA13_0<=TRUE)||LA13_0==42))
			{
				alt13 = 1;
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:57:8: b= expr ( ',' b= expr )*
				{
				DebugLocation(57, 9);
				PushFollow(Follow._expr_in_args393);
				b=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(b.Tree);
				DebugLocation(57, 15);
				// Chunky.g:57:15: ( ',' b= expr )*
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_0 = input.LA(1);

					if ((LA12_0==COMMA))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch ( alt12 )
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:57:16: ',' b= expr
						{
						DebugLocation(57, 16);
						char_literal34=(IToken)Match(input,COMMA,Follow._COMMA_in_args396); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_COMMA.Add(char_literal34);

						DebugLocation(57, 21);
						PushFollow(Follow._expr_in_args400);
						b=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(b.Tree);

						}
						break;

					default:
						goto loop12;
					}
				}

				loop12:
					;

				} finally { DebugExitSubRule(12); }


				}
				break;

			}
			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: b
			// token labels: 
			// rule labels: b, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 58:3: -> ^( ARGS $b)
			{
				DebugLocation(58, 6);
				// Chunky.g:58:6: ^( ARGS $b)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(58, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, "ARGS"), root_1);

				DebugLocation(58, 14);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args", 7);
			LeaveRule("args", 7);
			LeaveRule_args();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		return retval;

	}
	// $ANTLR end "args"

	private sealed partial class call_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public call_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_call();
	partial void LeaveRule_call();

	// $ANTLR start "call"
	// Chunky.g:61:1: call : (t= dot -> $t) ( ( '(' )=> '(' args ')' -> ^( CALL $call args ) )* ;
	[GrammarRule("call")]
	private ChunkyParser.call_return call()
	{
		EnterRule_call();
		EnterRule("call", 8);
		TraceIn("call", 8);
		ChunkyParser.call_return retval = new ChunkyParser.call_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal35 = default(IToken);
		IToken char_literal37 = default(IToken);
		ChunkyParser.dot_return t = default(ChunkyParser.dot_return);
		ChunkyParser.args_return args36 = default(ChunkyParser.args_return);

		CommonTree char_literal35_tree = default(CommonTree);
		CommonTree char_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_LPAREN=new RewriteRuleITokenStream(adaptor,"token LPAREN");
		RewriteRuleITokenStream stream_RPAREN=new RewriteRuleITokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_dot=new RewriteRuleSubtreeStream(adaptor,"rule dot");
		RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args");
		try { DebugEnterRule(GrammarFileName, "call");
		DebugLocation(61, 1);
		try
		{
			// Chunky.g:61:5: ( (t= dot -> $t) ( ( '(' )=> '(' args ')' -> ^( CALL $call args ) )* )
			DebugEnterAlt(1);
			// Chunky.g:61:7: (t= dot -> $t) ( ( '(' )=> '(' args ')' -> ^( CALL $call args ) )*
			{
			DebugLocation(61, 7);
			// Chunky.g:61:7: (t= dot -> $t)
			DebugEnterAlt(1);
			// Chunky.g:61:8: t= dot
			{
			DebugLocation(61, 9);
			PushFollow(Follow._dot_in_call427);
			t=dot();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_dot.Add(t.Tree);


			{
			// AST REWRITE
			// elements: t
			// token labels: 
			// rule labels: t, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.Tree:null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 61:13: -> $t
			{
				DebugLocation(61, 16);
				adaptor.AddChild(root_0, stream_t.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(62, 3);
			// Chunky.g:62:3: ( ( '(' )=> '(' args ')' -> ^( CALL $call args ) )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==LPAREN))
				{
					int LA14_2 = input.LA(2);

					if ((EvaluatePredicate(synpred1_Chunky_fragment)))
					{
						alt14 = 1;
					}


				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:63:4: ( '(' )=> '(' args ')'
					{
					DebugLocation(63, 13);
					char_literal35=(IToken)Match(input,LPAREN,Follow._LPAREN_in_call446); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_LPAREN.Add(char_literal35);

					DebugLocation(63, 17);
					PushFollow(Follow._args_in_call448);
					args36=args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_args.Add(args36.Tree);
					DebugLocation(63, 22);
					char_literal37=(IToken)Match(input,RPAREN,Follow._RPAREN_in_call450); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_RPAREN.Add(char_literal37);



					{
					// AST REWRITE
					// elements: call, args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 64:4: -> ^( CALL $call args )
					{
						DebugLocation(64, 7);
						// Chunky.g:64:7: ^( CALL $call args )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(64, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CALL, "CALL"), root_1);

						DebugLocation(64, 15);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(64, 20);
						adaptor.AddChild(root_1, stream_args.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call", 8);
			LeaveRule("call", 8);
			LeaveRule_call();
		}
		DebugLocation(66, 1);
		} finally { DebugExitRule(GrammarFileName, "call"); }
		return retval;

	}
	// $ANTLR end "call"

	private sealed partial class not_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public not_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_not();
	partial void LeaveRule_not();

	// $ANTLR start "not"
	// Chunky.g:68:1: not : ( '!' )? call ;
	[GrammarRule("not")]
	private ChunkyParser.not_return not()
	{
		EnterRule_not();
		EnterRule("not", 9);
		TraceIn("not", 9);
		ChunkyParser.not_return retval = new ChunkyParser.not_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal38 = default(IToken);
		ChunkyParser.call_return call39 = default(ChunkyParser.call_return);

		CommonTree char_literal38_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "not");
		DebugLocation(68, 1);
		try
		{
			// Chunky.g:68:5: ( ( '!' )? call )
			DebugEnterAlt(1);
			// Chunky.g:68:7: ( '!' )? call
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(68, 10);
			// Chunky.g:68:10: ( '!' )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==42))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:68:10: '!'
				{
				DebugLocation(68, 10);
				char_literal38=(IToken)Match(input,42,Follow._42_in_not479); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal38_tree = (CommonTree)adaptor.Create(char_literal38);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal38_tree, root_0);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(68, 13);
			PushFollow(Follow._call_in_not483);
			call39=call();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, call39.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("not", 9);
			LeaveRule("not", 9);
			LeaveRule_not();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "not"); }
		return retval;

	}
	// $ANTLR end "not"

	private sealed partial class mul_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public mul_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_mul();
	partial void LeaveRule_mul();

	// $ANTLR start "mul"
	// Chunky.g:71:1: mul : not ( ( '*' | '/' | '%' )=> ( '*' | '/' | '%' ) not )* ;
	[GrammarRule("mul")]
	private ChunkyParser.mul_return mul()
	{
		EnterRule_mul();
		EnterRule("mul", 10);
		TraceIn("mul", 10);
		ChunkyParser.mul_return retval = new ChunkyParser.mul_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set41 = default(IToken);
		ChunkyParser.not_return not40 = default(ChunkyParser.not_return);
		ChunkyParser.not_return not42 = default(ChunkyParser.not_return);

		CommonTree set41_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "mul");
		DebugLocation(71, 1);
		try
		{
			// Chunky.g:71:5: ( not ( ( '*' | '/' | '%' )=> ( '*' | '/' | '%' ) not )* )
			DebugEnterAlt(1);
			// Chunky.g:71:7: not ( ( '*' | '/' | '%' )=> ( '*' | '/' | '%' ) not )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(71, 7);
			PushFollow(Follow._not_in_mul493);
			not40=not();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, not40.Tree);
			DebugLocation(71, 11);
			// Chunky.g:71:11: ( ( '*' | '/' | '%' )=> ( '*' | '/' | '%' ) not )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_0 = input.LA(1);

				if ((LA16_0==PERCENT||(LA16_0>=SLASH && LA16_0<=STAR)))
				{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred2_Chunky_fragment)))
					{
						alt16 = 1;
					}


				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:71:12: ( '*' | '/' | '%' )=> ( '*' | '/' | '%' ) not
					{
					DebugLocation(71, 50);
					set41=(IToken)input.LT(1);
					set41=(IToken)input.LT(1);
					if (input.LA(1)==PERCENT||(input.LA(1)>=SLASH && input.LA(1)<=STAR))
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set41), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(71, 52);
					PushFollow(Follow._not_in_mul523);
					not42=not();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, not42.Tree);

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul", 10);
			LeaveRule("mul", 10);
			LeaveRule_mul();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "mul"); }
		return retval;

	}
	// $ANTLR end "mul"

	private sealed partial class add_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public add_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_add();
	partial void LeaveRule_add();

	// $ANTLR start "add"
	// Chunky.g:74:1: add : mul ( ( '+' | '-' )=> ( '+' | '-' ) mul )* ;
	[GrammarRule("add")]
	private ChunkyParser.add_return add()
	{
		EnterRule_add();
		EnterRule("add", 11);
		TraceIn("add", 11);
		ChunkyParser.add_return retval = new ChunkyParser.add_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set44 = default(IToken);
		ChunkyParser.mul_return mul43 = default(ChunkyParser.mul_return);
		ChunkyParser.mul_return mul45 = default(ChunkyParser.mul_return);

		CommonTree set44_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "add");
		DebugLocation(74, 1);
		try
		{
			// Chunky.g:74:5: ( mul ( ( '+' | '-' )=> ( '+' | '-' ) mul )* )
			DebugEnterAlt(1);
			// Chunky.g:74:7: mul ( ( '+' | '-' )=> ( '+' | '-' ) mul )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(74, 7);
			PushFollow(Follow._mul_in_add535);
			mul43=mul();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, mul43.Tree);
			DebugLocation(74, 11);
			// Chunky.g:74:11: ( ( '+' | '-' )=> ( '+' | '-' ) mul )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==MINUS||LA17_0==PLUS))
				{
					int LA17_2 = input.LA(2);

					if ((EvaluatePredicate(synpred3_Chunky_fragment)))
					{
						alt17 = 1;
					}


				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:74:12: ( '+' | '-' )=> ( '+' | '-' ) mul
					{
					DebugLocation(74, 38);
					set44=(IToken)input.LT(1);
					set44=(IToken)input.LT(1);
					if (input.LA(1)==MINUS||input.LA(1)==PLUS)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set44), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(74, 40);
					PushFollow(Follow._mul_in_add557);
					mul45=mul();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, mul45.Tree);

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add", 11);
			LeaveRule("add", 11);
			LeaveRule_add();
		}
		DebugLocation(75, 1);
		} finally { DebugExitRule(GrammarFileName, "add"); }
		return retval;

	}
	// $ANTLR end "add"

	private sealed partial class comp_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public comp_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_comp();
	partial void LeaveRule_comp();

	// $ANTLR start "comp"
	// Chunky.g:77:1: comp : add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' )=> ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) add )* ;
	[GrammarRule("comp")]
	private ChunkyParser.comp_return comp()
	{
		EnterRule_comp();
		EnterRule("comp", 12);
		TraceIn("comp", 12);
		ChunkyParser.comp_return retval = new ChunkyParser.comp_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set47 = default(IToken);
		ChunkyParser.add_return add46 = default(ChunkyParser.add_return);
		ChunkyParser.add_return add48 = default(ChunkyParser.add_return);

		CommonTree set47_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "comp");
		DebugLocation(77, 1);
		try
		{
			// Chunky.g:77:5: ( add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' )=> ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) add )* )
			DebugEnterAlt(1);
			// Chunky.g:77:7: add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' )=> ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) add )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(77, 7);
			PushFollow(Follow._add_in_comp568);
			add46=add();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, add46.Tree);
			DebugLocation(77, 11);
			// Chunky.g:77:11: ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' )=> ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) add )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_0 = input.LA(1);

				if ((LA18_0==EQUAL||(LA18_0>=GREATER && LA18_0<=GREATEREQUAL)||(LA18_0>=LESS && LA18_0<=LESSEQUAL)||LA18_0==NOTEQUAL))
				{
					int LA18_2 = input.LA(2);

					if ((EvaluatePredicate(synpred4_Chunky_fragment)))
					{
						alt18 = 1;
					}


				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:77:12: ( '==' | '<' | '<=' | '>=' | '>' | '!=' )=> ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) add
					{
					DebugLocation(77, 94);
					set47=(IToken)input.LT(1);
					set47=(IToken)input.LT(1);
					if (input.LA(1)==EQUAL||(input.LA(1)>=GREATER && input.LA(1)<=GREATEREQUAL)||(input.LA(1)>=LESS && input.LA(1)<=LESSEQUAL)||input.LA(1)==NOTEQUAL)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set47), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(77, 96);
					PushFollow(Follow._add_in_comp622);
					add48=add();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, add48.Tree);

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comp", 12);
			LeaveRule("comp", 12);
			LeaveRule_comp();
		}
		DebugLocation(78, 1);
		} finally { DebugExitRule(GrammarFileName, "comp"); }
		return retval;

	}
	// $ANTLR end "comp"

	private sealed partial class bool_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bool_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_bool();
	partial void LeaveRule_bool();

	// $ANTLR start "bool"
	// Chunky.g:80:1: bool : comp ( ( '&' | '&&' | '|' | '||' )=> ( '&' | '&&' | '|' | '||' ) comp )* ;
	[GrammarRule("bool")]
	private ChunkyParser.bool_return @bool()
	{
		EnterRule_bool();
		EnterRule("bool", 13);
		TraceIn("bool", 13);
		ChunkyParser.bool_return retval = new ChunkyParser.bool_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set50 = default(IToken);
		ChunkyParser.comp_return comp49 = default(ChunkyParser.comp_return);
		ChunkyParser.comp_return comp51 = default(ChunkyParser.comp_return);

		CommonTree set50_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "bool");
		DebugLocation(80, 1);
		try
		{
			// Chunky.g:80:5: ( comp ( ( '&' | '&&' | '|' | '||' )=> ( '&' | '&&' | '|' | '||' ) comp )* )
			DebugEnterAlt(1);
			// Chunky.g:80:7: comp ( ( '&' | '&&' | '|' | '||' )=> ( '&' | '&&' | '|' | '||' ) comp )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(80, 7);
			PushFollow(Follow._comp_in_bool633);
			comp49=comp();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, comp49.Tree);
			DebugLocation(80, 12);
			// Chunky.g:80:12: ( ( '&' | '&&' | '|' | '||' )=> ( '&' | '&&' | '|' | '||' ) comp )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, false);
				int LA19_0 = input.LA(1);

				if ((LA19_0==AMPER||LA19_0==DAMPER||LA19_0==DPIPE||LA19_0==PIPE))
				{
					int LA19_2 = input.LA(2);

					if ((EvaluatePredicate(synpred5_Chunky_fragment)))
					{
						alt19 = 1;
					}


				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:80:13: ( '&' | '&&' | '|' | '||' )=> ( '&' | '&&' | '|' | '||' ) comp
					{
					DebugLocation(80, 67);
					set50=(IToken)input.LT(1);
					set50=(IToken)input.LT(1);
					if (input.LA(1)==AMPER||input.LA(1)==DAMPER||input.LA(1)==DPIPE||input.LA(1)==PIPE)
					{
						input.Consume();
						if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set50), root_0);
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(80, 69);
					PushFollow(Follow._comp_in_bool671);
					comp51=comp();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, comp51.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bool", 13);
			LeaveRule("bool", 13);
			LeaveRule_bool();
		}
		DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "bool"); }
		return retval;

	}
	// $ANTLR end "bool"

	private sealed partial class expr_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expr_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// Chunky.g:83:1: expr : bool ;
	[GrammarRule("expr")]
	private ChunkyParser.expr_return expr()
	{
		EnterRule_expr();
		EnterRule("expr", 14);
		TraceIn("expr", 14);
		ChunkyParser.expr_return retval = new ChunkyParser.expr_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		ChunkyParser.bool_return bool52 = default(ChunkyParser.bool_return);


		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(83, 1);
		try
		{
			// Chunky.g:83:5: ( bool )
			DebugEnterAlt(1);
			// Chunky.g:83:7: bool
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(83, 7);
			PushFollow(Follow._bool_in_expr682);
			bool52=@bool();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bool52.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 14);
			LeaveRule("expr", 14);
			LeaveRule_expr();
		}
		DebugLocation(84, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	private sealed partial class exprs_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public exprs_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_exprs();
	partial void LeaveRule_exprs();

	// $ANTLR start "exprs"
	// Chunky.g:86:1: exprs : ( (e+= expr )? ';' )+ -> ^( BLOCK ( $e)* ) ;
	[GrammarRule("exprs")]
	private ChunkyParser.exprs_return exprs()
	{
		EnterRule_exprs();
		EnterRule("exprs", 15);
		TraceIn("exprs", 15);
		ChunkyParser.exprs_return retval = new ChunkyParser.exprs_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal53 = default(IToken);
		List<CommonTree> list_e = null;
		ChunkyParser.expr_return e = default(ChunkyParser.expr_return);
		CommonTree char_literal53_tree = default(CommonTree);
		RewriteRuleITokenStream stream_SEMI=new RewriteRuleITokenStream(adaptor,"token SEMI");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "exprs");
		DebugLocation(86, 1);
		try
		{
			// Chunky.g:87:2: ( ( (e+= expr )? ';' )+ -> ^( BLOCK ( $e)* ) )
			DebugEnterAlt(1);
			// Chunky.g:87:4: ( (e+= expr )? ';' )+
			{
			DebugLocation(87, 4);
			// Chunky.g:87:4: ( (e+= expr )? ';' )+
			int cnt21=0;
			try { DebugEnterSubRule(21);
			while (true)
			{
				int alt21=2;
				try { DebugEnterDecision(21, false);
				int LA21_0 = input.LA(1);

				if (((LA21_0>=FALSE && LA21_0<=FUNC)||(LA21_0>=ID && LA21_0<=INT)||LA21_0==LPAREN||LA21_0==SEMI||(LA21_0>=STRING && LA21_0<=TRUE)||LA21_0==42))
				{
					alt21 = 1;
				}


				} finally { DebugExitDecision(21); }
				switch (alt21)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:87:5: (e+= expr )? ';'
					{
					DebugLocation(87, 6);
					// Chunky.g:87:6: (e+= expr )?
					int alt20=2;
					try { DebugEnterSubRule(20);
					try { DebugEnterDecision(20, false);
					int LA20_0 = input.LA(1);

					if (((LA20_0>=FALSE && LA20_0<=FUNC)||(LA20_0>=ID && LA20_0<=INT)||LA20_0==LPAREN||(LA20_0>=STRING && LA20_0<=TRUE)||LA20_0==42))
					{
						alt20 = 1;
					}
					} finally { DebugExitDecision(20); }
					switch (alt20)
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:87:6: e+= expr
						{
						DebugLocation(87, 6);
						PushFollow(Follow._expr_in_exprs696);
						e=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(e.Tree);
						if (list_e==null) list_e=new List<CommonTree>();
						list_e.Add(e.Tree);


						}
						break;

					}
					} finally { DebugExitSubRule(20); }

					DebugLocation(87, 14);
					char_literal53=(IToken)Match(input,SEMI,Follow._SEMI_in_exprs699); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_SEMI.Add(char_literal53);


					}
					break;

				default:
					if (cnt21 >= 1)
						goto loop21;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee21 = new EarlyExitException( 21, input );
					DebugRecognitionException(eee21);
					throw eee21;
				}
				cnt21++;
			}
			loop21:
				;

			} finally { DebugExitSubRule(21); }



			{
			// AST REWRITE
			// elements: e
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: e
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_e=new RewriteRuleSubtreeStream(adaptor,"token e",list_e);
			root_0 = (CommonTree)adaptor.Nil();
			// 88:3: -> ^( BLOCK ( $e)* )
			{
				DebugLocation(88, 6);
				// Chunky.g:88:6: ^( BLOCK ( $e)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(88, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(88, 15);
				// Chunky.g:88:15: ( $e)*
				while ( stream_e.HasNext )
				{
					DebugLocation(88, 15);
					adaptor.AddChild(root_1, stream_e.NextTree());

				}
				stream_e.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprs", 15);
			LeaveRule("exprs", 15);
			LeaveRule_exprs();
		}
		DebugLocation(89, 1);
		} finally { DebugExitRule(GrammarFileName, "exprs"); }
		return retval;

	}
	// $ANTLR end "exprs"

	private sealed partial class block_return : ParserRuleReturnScope<IToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public block_return(ChunkyParser grammar) {OnCreated(grammar);}
		partial void OnCreated(ChunkyParser grammar);
	}

	partial void EnterRule_block();
	partial void LeaveRule_block();

	// $ANTLR start "block"
	// Chunky.g:91:1: block : '{' ( exprs )? '}' ;
	[GrammarRule("block")]
	private ChunkyParser.block_return block()
	{
		EnterRule_block();
		EnterRule("block", 16);
		TraceIn("block", 16);
		ChunkyParser.block_return retval = new ChunkyParser.block_return(this);
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		ChunkyParser.exprs_return exprs55 = default(ChunkyParser.exprs_return);

		CommonTree char_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(91, 1);
		try
		{
			// Chunky.g:92:2: ( '{' ( exprs )? '}' )
			DebugEnterAlt(1);
			// Chunky.g:92:4: '{' ( exprs )? '}'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(92, 7);
			char_literal54=(IToken)Match(input,LCURLY,Follow._LCURLY_in_block725); if (state.failed) return retval;
			DebugLocation(92, 9);
			// Chunky.g:92:9: ( exprs )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if (((LA22_0>=FALSE && LA22_0<=FUNC)||(LA22_0>=ID && LA22_0<=INT)||LA22_0==LPAREN||LA22_0==SEMI||(LA22_0>=STRING && LA22_0<=TRUE)||LA22_0==42))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:92:9: exprs
				{
				DebugLocation(92, 9);
				PushFollow(Follow._exprs_in_block728);
				exprs55=exprs();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, exprs55.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }

			DebugLocation(92, 19);
			char_literal56=(IToken)Match(input,RCURLY,Follow._RCURLY_in_block731); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 16);
			LeaveRule("block", 16);
			LeaveRule_block();
		}
		DebugLocation(93, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return retval;

	}
	// $ANTLR end "block"

	partial void EnterRule_synpred1_Chunky_fragment();
	partial void LeaveRule_synpred1_Chunky_fragment();

	// $ANTLR start synpred1_Chunky
	public void synpred1_Chunky_fragment()
	{
		EnterRule_synpred1_Chunky_fragment();
		EnterRule("synpred1_Chunky_fragment", 17);
		TraceIn("synpred1_Chunky_fragment", 17);
		try
		{
			// Chunky.g:63:4: ( '(' )
			DebugEnterAlt(1);
			// Chunky.g:63:5: '('
			{
			DebugLocation(63, 5);
			Match(input,LPAREN,Follow._LPAREN_in_synpred1_Chunky441); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Chunky_fragment", 17);
			LeaveRule("synpred1_Chunky_fragment", 17);
			LeaveRule_synpred1_Chunky_fragment();
		}
	}
	// $ANTLR end synpred1_Chunky

	partial void EnterRule_synpred2_Chunky_fragment();
	partial void LeaveRule_synpred2_Chunky_fragment();

	// $ANTLR start synpred2_Chunky
	public void synpred2_Chunky_fragment()
	{
		EnterRule_synpred2_Chunky_fragment();
		EnterRule("synpred2_Chunky_fragment", 18);
		TraceIn("synpred2_Chunky_fragment", 18);
		try
		{
			// Chunky.g:71:12: ( '*' | '/' | '%' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(71, 12);
			if (input.LA(1)==PERCENT||(input.LA(1)>=SLASH && input.LA(1)<=STAR))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred2_Chunky_fragment", 18);
			LeaveRule("synpred2_Chunky_fragment", 18);
			LeaveRule_synpred2_Chunky_fragment();
		}
	}
	// $ANTLR end synpred2_Chunky

	partial void EnterRule_synpred3_Chunky_fragment();
	partial void LeaveRule_synpred3_Chunky_fragment();

	// $ANTLR start synpred3_Chunky
	public void synpred3_Chunky_fragment()
	{
		EnterRule_synpred3_Chunky_fragment();
		EnterRule("synpred3_Chunky_fragment", 19);
		TraceIn("synpred3_Chunky_fragment", 19);
		try
		{
			// Chunky.g:74:12: ( '+' | '-' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(74, 12);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred3_Chunky_fragment", 19);
			LeaveRule("synpred3_Chunky_fragment", 19);
			LeaveRule_synpred3_Chunky_fragment();
		}
	}
	// $ANTLR end synpred3_Chunky

	partial void EnterRule_synpred4_Chunky_fragment();
	partial void LeaveRule_synpred4_Chunky_fragment();

	// $ANTLR start synpred4_Chunky
	public void synpred4_Chunky_fragment()
	{
		EnterRule_synpred4_Chunky_fragment();
		EnterRule("synpred4_Chunky_fragment", 20);
		TraceIn("synpred4_Chunky_fragment", 20);
		try
		{
			// Chunky.g:77:12: ( '==' | '<' | '<=' | '>=' | '>' | '!=' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(77, 12);
			if (input.LA(1)==EQUAL||(input.LA(1)>=GREATER && input.LA(1)<=GREATEREQUAL)||(input.LA(1)>=LESS && input.LA(1)<=LESSEQUAL)||input.LA(1)==NOTEQUAL)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred4_Chunky_fragment", 20);
			LeaveRule("synpred4_Chunky_fragment", 20);
			LeaveRule_synpred4_Chunky_fragment();
		}
	}
	// $ANTLR end synpred4_Chunky

	partial void EnterRule_synpred5_Chunky_fragment();
	partial void LeaveRule_synpred5_Chunky_fragment();

	// $ANTLR start synpred5_Chunky
	public void synpred5_Chunky_fragment()
	{
		EnterRule_synpred5_Chunky_fragment();
		EnterRule("synpred5_Chunky_fragment", 21);
		TraceIn("synpred5_Chunky_fragment", 21);
		try
		{
			// Chunky.g:80:13: ( '&' | '&&' | '|' | '||' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(80, 13);
			if (input.LA(1)==AMPER||input.LA(1)==DAMPER||input.LA(1)==DPIPE||input.LA(1)==PIPE)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("synpred5_Chunky_fragment", 21);
			LeaveRule("synpred5_Chunky_fragment", 21);
			LeaveRule_synpred5_Chunky_fragment();
		}
	}
	// $ANTLR end synpred5_Chunky
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _exprs_in_program81 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_params95 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _COMMA_in_params98 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ID_in_params102 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _FUNC_in_func_expr129 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _LPAREN_in_func_expr132 = new BitSet(new ulong[]{0x800100000UL});
		public static readonly BitSet _params_in_func_expr135 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _RPAREN_in_func_expr137 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _block_in_func_expr140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_if_expr151 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _LPAREN_in_if_expr153 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _expr_in_if_expr157 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _RPAREN_in_if_expr159 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _LCURLY_in_if_expr161 = new BitSet(new ulong[]{0x59408738000UL});
		public static readonly BitSet _expr_in_if_expr166 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _SEMI_in_if_expr169 = new BitSet(new ulong[]{0x59408738000UL});
		public static readonly BitSet _RCURLY_in_if_expr173 = new BitSet(new ulong[]{0x80000000002UL});
		public static readonly BitSet _43_in_if_expr179 = new BitSet(new ulong[]{0xA00000UL});
		public static readonly BitSet _if_expr_in_if_expr185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LCURLY_in_if_expr219 = new BitSet(new ulong[]{0x59408738000UL});
		public static readonly BitSet _expr_in_if_expr224 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _SEMI_in_if_expr227 = new BitSet(new ulong[]{0x59408738000UL});
		public static readonly BitSet _RCURLY_in_if_expr231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_term305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_term310 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _expr_in_term313 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _RPAREN_in_term315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_term321 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_term326 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_term331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_term336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term341 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_expr_in_term346 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_expr_in_term351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_dot362 = new BitSet(new ulong[]{0x1042UL});
		public static readonly BitSet _DOT_in_dot365 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _ID_in_dot368 = new BitSet(new ulong[]{0x1042UL});
		public static readonly BitSet _ASSIGN_in_dot376 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _expr_in_dot379 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args393 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _COMMA_in_args396 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _expr_in_args400 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _dot_in_call427 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _LPAREN_in_call446 = new BitSet(new ulong[]{0x58808738000UL});
		public static readonly BitSet _args_in_call448 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _RPAREN_in_call450 = new BitSet(new ulong[]{0x8000002UL});
		public static readonly BitSet _42_in_not479 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _call_in_not483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _not_in_mul493 = new BitSet(new ulong[]{0x6080000002UL});
		public static readonly BitSet _set_in_mul510 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _not_in_mul523 = new BitSet(new ulong[]{0x6080000002UL});
		public static readonly BitSet _mul_in_add535 = new BitSet(new ulong[]{0x210000002UL});
		public static readonly BitSet _set_in_add548 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _mul_in_add557 = new BitSet(new ulong[]{0x210000002UL});
		public static readonly BitSet _add_in_comp568 = new BitSet(new ulong[]{0x230C4002UL});
		public static readonly BitSet _set_in_comp597 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _add_in_comp622 = new BitSet(new ulong[]{0x230C4002UL});
		public static readonly BitSet _comp_in_bool633 = new BitSet(new ulong[]{0x100002412UL});
		public static readonly BitSet _set_in_bool654 = new BitSet(new ulong[]{0x58008738000UL});
		public static readonly BitSet _comp_in_bool671 = new BitSet(new ulong[]{0x100002412UL});
		public static readonly BitSet _bool_in_expr682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_exprs696 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _SEMI_in_exprs699 = new BitSet(new ulong[]{0x59008738002UL});
		public static readonly BitSet _LCURLY_in_block725 = new BitSet(new ulong[]{0x59408738000UL});
		public static readonly BitSet _exprs_in_block728 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _RCURLY_in_block731 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LPAREN_in_synpred1_Chunky441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred2_Chunky496 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred3_Chunky538 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred4_Chunky571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_synpred5_Chunky636 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace  Chunky 
