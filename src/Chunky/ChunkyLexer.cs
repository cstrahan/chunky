//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 Chunky.g 2011-09-08 18:00:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace  Chunky 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ChunkyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ARGS=4;
	public const int BLOCK=5;
	public const int CALL=6;
	public const int DIGIT=7;
	public const int DOT=8;
	public const int FLOAT=9;
	public const int FUNC=10;
	public const int ID=11;
	public const int IF=12;
	public const int INT=13;
	public const int LETTER=14;
	public const int PARAMS=15;
	public const int STRING=16;
	public const int WS=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;

    // delegates
    // delegators

	public ChunkyLexer()
	{
		OnCreated();
	}

	public ChunkyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ChunkyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "Chunky.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__18();
	partial void LeaveRule_T__18();

	// $ANTLR start "T__18"
	[GrammarRule("T__18")]
	private void mT__18()
	{
		EnterRule_T__18();
		EnterRule("T__18", 1);
		TraceIn("T__18", 1);
		try
		{
			int _type = T__18;
			int _channel = DefaultTokenChannel;
			// Chunky.g:9:7: ( '!' )
			DebugEnterAlt(1);
			// Chunky.g:9:9: '!'
			{
			DebugLocation(9, 9);
			Match('!'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__18", 1);
			LeaveRule("T__18", 1);
			LeaveRule_T__18();
		}
	}
	// $ANTLR end "T__18"

	partial void EnterRule_T__19();
	partial void LeaveRule_T__19();

	// $ANTLR start "T__19"
	[GrammarRule("T__19")]
	private void mT__19()
	{
		EnterRule_T__19();
		EnterRule("T__19", 2);
		TraceIn("T__19", 2);
		try
		{
			int _type = T__19;
			int _channel = DefaultTokenChannel;
			// Chunky.g:10:7: ( '!=' )
			DebugEnterAlt(1);
			// Chunky.g:10:9: '!='
			{
			DebugLocation(10, 9);
			Match("!="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__19", 2);
			LeaveRule("T__19", 2);
			LeaveRule_T__19();
		}
	}
	// $ANTLR end "T__19"

	partial void EnterRule_T__20();
	partial void LeaveRule_T__20();

	// $ANTLR start "T__20"
	[GrammarRule("T__20")]
	private void mT__20()
	{
		EnterRule_T__20();
		EnterRule("T__20", 3);
		TraceIn("T__20", 3);
		try
		{
			int _type = T__20;
			int _channel = DefaultTokenChannel;
			// Chunky.g:11:7: ( '&&' )
			DebugEnterAlt(1);
			// Chunky.g:11:9: '&&'
			{
			DebugLocation(11, 9);
			Match("&&"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__20", 3);
			LeaveRule("T__20", 3);
			LeaveRule_T__20();
		}
	}
	// $ANTLR end "T__20"

	partial void EnterRule_T__21();
	partial void LeaveRule_T__21();

	// $ANTLR start "T__21"
	[GrammarRule("T__21")]
	private void mT__21()
	{
		EnterRule_T__21();
		EnterRule("T__21", 4);
		TraceIn("T__21", 4);
		try
		{
			int _type = T__21;
			int _channel = DefaultTokenChannel;
			// Chunky.g:12:7: ( '&' )
			DebugEnterAlt(1);
			// Chunky.g:12:9: '&'
			{
			DebugLocation(12, 9);
			Match('&'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__21", 4);
			LeaveRule("T__21", 4);
			LeaveRule_T__21();
		}
	}
	// $ANTLR end "T__21"

	partial void EnterRule_T__22();
	partial void LeaveRule_T__22();

	// $ANTLR start "T__22"
	[GrammarRule("T__22")]
	private void mT__22()
	{
		EnterRule_T__22();
		EnterRule("T__22", 5);
		TraceIn("T__22", 5);
		try
		{
			int _type = T__22;
			int _channel = DefaultTokenChannel;
			// Chunky.g:13:7: ( '(' )
			DebugEnterAlt(1);
			// Chunky.g:13:9: '('
			{
			DebugLocation(13, 9);
			Match('('); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__22", 5);
			LeaveRule("T__22", 5);
			LeaveRule_T__22();
		}
	}
	// $ANTLR end "T__22"

	partial void EnterRule_T__23();
	partial void LeaveRule_T__23();

	// $ANTLR start "T__23"
	[GrammarRule("T__23")]
	private void mT__23()
	{
		EnterRule_T__23();
		EnterRule("T__23", 6);
		TraceIn("T__23", 6);
		try
		{
			int _type = T__23;
			int _channel = DefaultTokenChannel;
			// Chunky.g:14:7: ( ')' )
			DebugEnterAlt(1);
			// Chunky.g:14:9: ')'
			{
			DebugLocation(14, 9);
			Match(')'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__23", 6);
			LeaveRule("T__23", 6);
			LeaveRule_T__23();
		}
	}
	// $ANTLR end "T__23"

	partial void EnterRule_T__24();
	partial void LeaveRule_T__24();

	// $ANTLR start "T__24"
	[GrammarRule("T__24")]
	private void mT__24()
	{
		EnterRule_T__24();
		EnterRule("T__24", 7);
		TraceIn("T__24", 7);
		try
		{
			int _type = T__24;
			int _channel = DefaultTokenChannel;
			// Chunky.g:15:7: ( '*' )
			DebugEnterAlt(1);
			// Chunky.g:15:9: '*'
			{
			DebugLocation(15, 9);
			Match('*'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__24", 7);
			LeaveRule("T__24", 7);
			LeaveRule_T__24();
		}
	}
	// $ANTLR end "T__24"

	partial void EnterRule_T__25();
	partial void LeaveRule_T__25();

	// $ANTLR start "T__25"
	[GrammarRule("T__25")]
	private void mT__25()
	{
		EnterRule_T__25();
		EnterRule("T__25", 8);
		TraceIn("T__25", 8);
		try
		{
			int _type = T__25;
			int _channel = DefaultTokenChannel;
			// Chunky.g:16:7: ( '+' )
			DebugEnterAlt(1);
			// Chunky.g:16:9: '+'
			{
			DebugLocation(16, 9);
			Match('+'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__25", 8);
			LeaveRule("T__25", 8);
			LeaveRule_T__25();
		}
	}
	// $ANTLR end "T__25"

	partial void EnterRule_T__26();
	partial void LeaveRule_T__26();

	// $ANTLR start "T__26"
	[GrammarRule("T__26")]
	private void mT__26()
	{
		EnterRule_T__26();
		EnterRule("T__26", 9);
		TraceIn("T__26", 9);
		try
		{
			int _type = T__26;
			int _channel = DefaultTokenChannel;
			// Chunky.g:17:7: ( ',' )
			DebugEnterAlt(1);
			// Chunky.g:17:9: ','
			{
			DebugLocation(17, 9);
			Match(','); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__26", 9);
			LeaveRule("T__26", 9);
			LeaveRule_T__26();
		}
	}
	// $ANTLR end "T__26"

	partial void EnterRule_T__27();
	partial void LeaveRule_T__27();

	// $ANTLR start "T__27"
	[GrammarRule("T__27")]
	private void mT__27()
	{
		EnterRule_T__27();
		EnterRule("T__27", 10);
		TraceIn("T__27", 10);
		try
		{
			int _type = T__27;
			int _channel = DefaultTokenChannel;
			// Chunky.g:18:7: ( '-' )
			DebugEnterAlt(1);
			// Chunky.g:18:9: '-'
			{
			DebugLocation(18, 9);
			Match('-'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__27", 10);
			LeaveRule("T__27", 10);
			LeaveRule_T__27();
		}
	}
	// $ANTLR end "T__27"

	partial void EnterRule_T__28();
	partial void LeaveRule_T__28();

	// $ANTLR start "T__28"
	[GrammarRule("T__28")]
	private void mT__28()
	{
		EnterRule_T__28();
		EnterRule("T__28", 11);
		TraceIn("T__28", 11);
		try
		{
			int _type = T__28;
			int _channel = DefaultTokenChannel;
			// Chunky.g:19:7: ( '/' )
			DebugEnterAlt(1);
			// Chunky.g:19:9: '/'
			{
			DebugLocation(19, 9);
			Match('/'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__28", 11);
			LeaveRule("T__28", 11);
			LeaveRule_T__28();
		}
	}
	// $ANTLR end "T__28"

	partial void EnterRule_T__29();
	partial void LeaveRule_T__29();

	// $ANTLR start "T__29"
	[GrammarRule("T__29")]
	private void mT__29()
	{
		EnterRule_T__29();
		EnterRule("T__29", 12);
		TraceIn("T__29", 12);
		try
		{
			int _type = T__29;
			int _channel = DefaultTokenChannel;
			// Chunky.g:20:7: ( ';' )
			DebugEnterAlt(1);
			// Chunky.g:20:9: ';'
			{
			DebugLocation(20, 9);
			Match(';'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__29", 12);
			LeaveRule("T__29", 12);
			LeaveRule_T__29();
		}
	}
	// $ANTLR end "T__29"

	partial void EnterRule_T__30();
	partial void LeaveRule_T__30();

	// $ANTLR start "T__30"
	[GrammarRule("T__30")]
	private void mT__30()
	{
		EnterRule_T__30();
		EnterRule("T__30", 13);
		TraceIn("T__30", 13);
		try
		{
			int _type = T__30;
			int _channel = DefaultTokenChannel;
			// Chunky.g:21:7: ( '<' )
			DebugEnterAlt(1);
			// Chunky.g:21:9: '<'
			{
			DebugLocation(21, 9);
			Match('<'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__30", 13);
			LeaveRule("T__30", 13);
			LeaveRule_T__30();
		}
	}
	// $ANTLR end "T__30"

	partial void EnterRule_T__31();
	partial void LeaveRule_T__31();

	// $ANTLR start "T__31"
	[GrammarRule("T__31")]
	private void mT__31()
	{
		EnterRule_T__31();
		EnterRule("T__31", 14);
		TraceIn("T__31", 14);
		try
		{
			int _type = T__31;
			int _channel = DefaultTokenChannel;
			// Chunky.g:22:7: ( '<=' )
			DebugEnterAlt(1);
			// Chunky.g:22:9: '<='
			{
			DebugLocation(22, 9);
			Match("<="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__31", 14);
			LeaveRule("T__31", 14);
			LeaveRule_T__31();
		}
	}
	// $ANTLR end "T__31"

	partial void EnterRule_T__32();
	partial void LeaveRule_T__32();

	// $ANTLR start "T__32"
	[GrammarRule("T__32")]
	private void mT__32()
	{
		EnterRule_T__32();
		EnterRule("T__32", 15);
		TraceIn("T__32", 15);
		try
		{
			int _type = T__32;
			int _channel = DefaultTokenChannel;
			// Chunky.g:23:7: ( '=' )
			DebugEnterAlt(1);
			// Chunky.g:23:9: '='
			{
			DebugLocation(23, 9);
			Match('='); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__32", 15);
			LeaveRule("T__32", 15);
			LeaveRule_T__32();
		}
	}
	// $ANTLR end "T__32"

	partial void EnterRule_T__33();
	partial void LeaveRule_T__33();

	// $ANTLR start "T__33"
	[GrammarRule("T__33")]
	private void mT__33()
	{
		EnterRule_T__33();
		EnterRule("T__33", 16);
		TraceIn("T__33", 16);
		try
		{
			int _type = T__33;
			int _channel = DefaultTokenChannel;
			// Chunky.g:24:7: ( '==' )
			DebugEnterAlt(1);
			// Chunky.g:24:9: '=='
			{
			DebugLocation(24, 9);
			Match("=="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__33", 16);
			LeaveRule("T__33", 16);
			LeaveRule_T__33();
		}
	}
	// $ANTLR end "T__33"

	partial void EnterRule_T__34();
	partial void LeaveRule_T__34();

	// $ANTLR start "T__34"
	[GrammarRule("T__34")]
	private void mT__34()
	{
		EnterRule_T__34();
		EnterRule("T__34", 17);
		TraceIn("T__34", 17);
		try
		{
			int _type = T__34;
			int _channel = DefaultTokenChannel;
			// Chunky.g:25:7: ( '>' )
			DebugEnterAlt(1);
			// Chunky.g:25:9: '>'
			{
			DebugLocation(25, 9);
			Match('>'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__34", 17);
			LeaveRule("T__34", 17);
			LeaveRule_T__34();
		}
	}
	// $ANTLR end "T__34"

	partial void EnterRule_T__35();
	partial void LeaveRule_T__35();

	// $ANTLR start "T__35"
	[GrammarRule("T__35")]
	private void mT__35()
	{
		EnterRule_T__35();
		EnterRule("T__35", 18);
		TraceIn("T__35", 18);
		try
		{
			int _type = T__35;
			int _channel = DefaultTokenChannel;
			// Chunky.g:26:7: ( '>=' )
			DebugEnterAlt(1);
			// Chunky.g:26:9: '>='
			{
			DebugLocation(26, 9);
			Match(">="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__35", 18);
			LeaveRule("T__35", 18);
			LeaveRule_T__35();
		}
	}
	// $ANTLR end "T__35"

	partial void EnterRule_T__36();
	partial void LeaveRule_T__36();

	// $ANTLR start "T__36"
	[GrammarRule("T__36")]
	private void mT__36()
	{
		EnterRule_T__36();
		EnterRule("T__36", 19);
		TraceIn("T__36", 19);
		try
		{
			int _type = T__36;
			int _channel = DefaultTokenChannel;
			// Chunky.g:27:7: ( 'else' )
			DebugEnterAlt(1);
			// Chunky.g:27:9: 'else'
			{
			DebugLocation(27, 9);
			Match("else"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__36", 19);
			LeaveRule("T__36", 19);
			LeaveRule_T__36();
		}
	}
	// $ANTLR end "T__36"

	partial void EnterRule_T__37();
	partial void LeaveRule_T__37();

	// $ANTLR start "T__37"
	[GrammarRule("T__37")]
	private void mT__37()
	{
		EnterRule_T__37();
		EnterRule("T__37", 20);
		TraceIn("T__37", 20);
		try
		{
			int _type = T__37;
			int _channel = DefaultTokenChannel;
			// Chunky.g:28:7: ( '{' )
			DebugEnterAlt(1);
			// Chunky.g:28:9: '{'
			{
			DebugLocation(28, 9);
			Match('{'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__37", 20);
			LeaveRule("T__37", 20);
			LeaveRule_T__37();
		}
	}
	// $ANTLR end "T__37"

	partial void EnterRule_T__38();
	partial void LeaveRule_T__38();

	// $ANTLR start "T__38"
	[GrammarRule("T__38")]
	private void mT__38()
	{
		EnterRule_T__38();
		EnterRule("T__38", 21);
		TraceIn("T__38", 21);
		try
		{
			int _type = T__38;
			int _channel = DefaultTokenChannel;
			// Chunky.g:29:7: ( '|' )
			DebugEnterAlt(1);
			// Chunky.g:29:9: '|'
			{
			DebugLocation(29, 9);
			Match('|'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__38", 21);
			LeaveRule("T__38", 21);
			LeaveRule_T__38();
		}
	}
	// $ANTLR end "T__38"

	partial void EnterRule_T__39();
	partial void LeaveRule_T__39();

	// $ANTLR start "T__39"
	[GrammarRule("T__39")]
	private void mT__39()
	{
		EnterRule_T__39();
		EnterRule("T__39", 22);
		TraceIn("T__39", 22);
		try
		{
			int _type = T__39;
			int _channel = DefaultTokenChannel;
			// Chunky.g:30:7: ( '||' )
			DebugEnterAlt(1);
			// Chunky.g:30:9: '||'
			{
			DebugLocation(30, 9);
			Match("||"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__39", 22);
			LeaveRule("T__39", 22);
			LeaveRule_T__39();
		}
	}
	// $ANTLR end "T__39"

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 23);
		TraceIn("T__40", 23);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// Chunky.g:31:7: ( '}' )
			DebugEnterAlt(1);
			// Chunky.g:31:9: '}'
			{
			DebugLocation(31, 9);
			Match('}'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 23);
			LeaveRule("T__40", 23);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 24);
		TraceIn("STRING", 24);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Chunky.g:97:2: ( '\"' (~ '\"' | '\\\\\"' )* '\"' )
			DebugEnterAlt(1);
			// Chunky.g:97:4: '\"' (~ '\"' | '\\\\\"' )* '\"'
			{
			DebugLocation(97, 4);
			Match('\"'); if (state.failed) return;
			DebugLocation(97, 8);
			// Chunky.g:97:8: (~ '\"' | '\\\\\"' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=3;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='\\'))
				{
					int LA1_2 = input.LA(2);

					if ((LA1_2=='\"'))
					{
						int LA1_4 = input.LA(3);

						if (((LA1_4>='\u0000' && LA1_4<='\uFFFF')))
						{
							alt1 = 2;
						}

						else
						{
							alt1 = 1;
						}

					}
					else if (((LA1_2>='\u0000' && LA1_2<='!')||(LA1_2>='#' && LA1_2<='\uFFFF')))
					{
						alt1 = 1;
					}


				}
				else if (((LA1_0>='\u0000' && LA1_0<='!')||(LA1_0>='#' && LA1_0<='[')||(LA1_0>=']' && LA1_0<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:97:9: ~ '\"'
					{
					DebugLocation(97, 9);
					input.Consume();
					state.failed=false;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Chunky.g:97:14: '\\\\\"'
					{
					DebugLocation(97, 14);
					Match("\\\""); if (state.failed) return;


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(97, 22);
			Match('\"'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 24);
			LeaveRule("STRING", 24);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 25);
		TraceIn("IF", 25);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// Chunky.g:100:4: ( 'if' )
			DebugEnterAlt(1);
			// Chunky.g:100:6: 'if'
			{
			DebugLocation(100, 6);
			Match("if"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 25);
			LeaveRule("IF", 25);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_FUNC();
	partial void LeaveRule_FUNC();

	// $ANTLR start "FUNC"
	[GrammarRule("FUNC")]
	private void mFUNC()
	{
		EnterRule_FUNC();
		EnterRule("FUNC", 26);
		TraceIn("FUNC", 26);
		try
		{
			int _type = FUNC;
			int _channel = DefaultTokenChannel;
			// Chunky.g:102:5: ( 'func' )
			DebugEnterAlt(1);
			// Chunky.g:102:7: 'func'
			{
			DebugLocation(102, 7);
			Match("func"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNC", 26);
			LeaveRule("FUNC", 26);
			LeaveRule_FUNC();
		}
	}
	// $ANTLR end "FUNC"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 27);
		TraceIn("ID", 27);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Chunky.g:104:4: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// Chunky.g:104:6: ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(104, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(104, 21);
			// Chunky.g:104:21: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(104, 21);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 27);
			LeaveRule("ID", 27);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 28);
		TraceIn("INT", 28);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:107:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// Chunky.g:107:7: ( DIGIT )+
			{
			DebugLocation(107, 7);
			// Chunky.g:107:7: ( DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(107, 7);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 28);
			LeaveRule("INT", 28);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 29);
		TraceIn("FLOAT", 29);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:110:2: ( ( DIGIT )* ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |) )
			DebugEnterAlt(1);
			// Chunky.g:110:4: ( DIGIT )* ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |)
			{
			DebugLocation(110, 4);
			// Chunky.g:110:4: ( DIGIT )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(110, 4);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(110, 13);
			// Chunky.g:110:13: ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |)
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='.') && (EvaluatePredicate(synpred1_Chunky_fragment)))
			{
				alt6 = 1;
			}
			else
			{
				alt6 = 2;}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:110:14: ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ )
				{
				DebugLocation(110, 28);
				// Chunky.g:110:28: ( '.' ( DIGIT )+ )
				DebugEnterAlt(1);
				// Chunky.g:110:29: '.' ( DIGIT )+
				{
				DebugLocation(110, 29);
				Match('.'); if (state.failed) return;
				DebugLocation(110, 33);
				// Chunky.g:110:33: ( DIGIT )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>='0' && LA5_0<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:
						{
						DebugLocation(110, 33);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Chunky.g:110:43: 
				{
				DebugLocation(110, 43);
				if (state.backtracking == 0)
				{
					 _type = INT; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 29);
			LeaveRule("FLOAT", 29);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 30);
		TraceIn("WS", 30);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Chunky.g:113:4: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// Chunky.g:113:6: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(113, 6);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(117, 5);
			if (state.backtracking == 0)
			{
				_channel=99;
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 30);
			LeaveRule("WS", 30);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 31);
		TraceIn("DOT", 31);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:120:5: ( '.' )
			DebugEnterAlt(1);
			// Chunky.g:120:7: '.'
			{
			DebugLocation(120, 7);
			Match('.'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 31);
			LeaveRule("DOT", 31);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 32);
		TraceIn("LETTER", 32);
		try
		{
			// Chunky.g:124:8: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(124, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("LETTER", 32);
			LeaveRule("LETTER", 32);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 33);
		TraceIn("DIGIT", 33);
		try
		{
			// Chunky.g:127:7: ( '0' .. '9' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(127, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("DIGIT", 33);
			LeaveRule("DIGIT", 33);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	public override void mTokens()
	{
		// Chunky.g:1:8: ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | STRING | IF | FUNC | ID | INT | FLOAT | WS | DOT )
		int alt7=31;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// Chunky.g:1:10: T__18
			{
			DebugLocation(1, 10);
			mT__18(); if (state.failed) return;

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Chunky.g:1:16: T__19
			{
			DebugLocation(1, 16);
			mT__19(); if (state.failed) return;

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Chunky.g:1:22: T__20
			{
			DebugLocation(1, 22);
			mT__20(); if (state.failed) return;

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Chunky.g:1:28: T__21
			{
			DebugLocation(1, 28);
			mT__21(); if (state.failed) return;

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Chunky.g:1:34: T__22
			{
			DebugLocation(1, 34);
			mT__22(); if (state.failed) return;

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Chunky.g:1:40: T__23
			{
			DebugLocation(1, 40);
			mT__23(); if (state.failed) return;

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Chunky.g:1:46: T__24
			{
			DebugLocation(1, 46);
			mT__24(); if (state.failed) return;

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Chunky.g:1:52: T__25
			{
			DebugLocation(1, 52);
			mT__25(); if (state.failed) return;

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Chunky.g:1:58: T__26
			{
			DebugLocation(1, 58);
			mT__26(); if (state.failed) return;

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Chunky.g:1:64: T__27
			{
			DebugLocation(1, 64);
			mT__27(); if (state.failed) return;

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Chunky.g:1:70: T__28
			{
			DebugLocation(1, 70);
			mT__28(); if (state.failed) return;

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Chunky.g:1:76: T__29
			{
			DebugLocation(1, 76);
			mT__29(); if (state.failed) return;

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Chunky.g:1:82: T__30
			{
			DebugLocation(1, 82);
			mT__30(); if (state.failed) return;

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Chunky.g:1:88: T__31
			{
			DebugLocation(1, 88);
			mT__31(); if (state.failed) return;

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Chunky.g:1:94: T__32
			{
			DebugLocation(1, 94);
			mT__32(); if (state.failed) return;

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Chunky.g:1:100: T__33
			{
			DebugLocation(1, 100);
			mT__33(); if (state.failed) return;

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Chunky.g:1:106: T__34
			{
			DebugLocation(1, 106);
			mT__34(); if (state.failed) return;

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Chunky.g:1:112: T__35
			{
			DebugLocation(1, 112);
			mT__35(); if (state.failed) return;

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Chunky.g:1:118: T__36
			{
			DebugLocation(1, 118);
			mT__36(); if (state.failed) return;

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Chunky.g:1:124: T__37
			{
			DebugLocation(1, 124);
			mT__37(); if (state.failed) return;

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Chunky.g:1:130: T__38
			{
			DebugLocation(1, 130);
			mT__38(); if (state.failed) return;

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Chunky.g:1:136: T__39
			{
			DebugLocation(1, 136);
			mT__39(); if (state.failed) return;

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Chunky.g:1:142: T__40
			{
			DebugLocation(1, 142);
			mT__40(); if (state.failed) return;

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Chunky.g:1:148: STRING
			{
			DebugLocation(1, 148);
			mSTRING(); if (state.failed) return;

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Chunky.g:1:155: IF
			{
			DebugLocation(1, 155);
			mIF(); if (state.failed) return;

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Chunky.g:1:158: FUNC
			{
			DebugLocation(1, 158);
			mFUNC(); if (state.failed) return;

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Chunky.g:1:163: ID
			{
			DebugLocation(1, 163);
			mID(); if (state.failed) return;

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Chunky.g:1:166: INT
			{
			DebugLocation(1, 166);
			mINT(); if (state.failed) return;

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Chunky.g:1:170: FLOAT
			{
			DebugLocation(1, 170);
			mFLOAT(); if (state.failed) return;

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Chunky.g:1:176: WS
			{
			DebugLocation(1, 176);
			mWS(); if (state.failed) return;

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Chunky.g:1:179: DOT
			{
			DebugLocation(1, 179);
			mDOT(); if (state.failed) return;

			}
			break;

		}

	}

	partial void EnterRule_synpred1_Chunky_fragment();
	partial void LeaveRule_synpred1_Chunky_fragment();

	// $ANTLR start synpred1_Chunky
	public void synpred1_Chunky_fragment()
	{
		EnterRule_synpred1_Chunky_fragment();
		EnterRule("synpred1_Chunky_fragment", 35);
		TraceIn("synpred1_Chunky_fragment", 35);
		try
		{
			// Chunky.g:110:14: ( '.' ( DIGIT )+ )
			DebugEnterAlt(1);
			// Chunky.g:110:15: '.' ( DIGIT )+
			{
			DebugLocation(110, 15);
			Match('.'); if (state.failed) return;
			DebugLocation(110, 19);
			// Chunky.g:110:19: ( DIGIT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(110, 19);
					if ((input.LA(1)>='0' && input.LA(1)<='9'))
					{
						input.Consume();
					state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						Recover(mse);
						throw mse;}


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		finally
		{
			TraceOut("synpred1_Chunky_fragment", 35);
			LeaveRule("synpred1_Chunky_fragment", 35);
			LeaveRule_synpred1_Chunky_fragment();
		}
	}
	// $ANTLR end synpred1_Chunky

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x1\x18\x1\x1B\x1\x1D\x8\xFFFF\x1\x1F\x1\x21\x1\x23\x1\x15\x1\xFFFF\x1"+
			"\x26\x2\xFFFF\x2\x15\x1\xFFFF\x1\x29\x1\x2A\xC\xFFFF\x1\x15\x2\xFFFF"+
			"\x1\x2C\x1\x15\x2\xFFFF\x1\x15\x1\xFFFF\x1\x15\x1\x30\x1\x31\x2\xFFFF";
		private const string DFA7_eofS =
			"\x32\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x1\x3D\x1\x26\x8\xFFFF\x3\x3D\x1\x6C\x1\xFFFF\x1\x7C\x2\xFFFF"+
			"\x1\x66\x1\x75\x1\xFFFF\x1\x2E\x1\x30\xC\xFFFF\x1\x73\x2\xFFFF\x1\x30"+
			"\x1\x6E\x2\xFFFF\x1\x65\x1\xFFFF\x1\x63\x2\x30\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x7D\x1\x3D\x1\x26\x8\xFFFF\x3\x3D\x1\x6C\x1\xFFFF\x1\x7C\x2\xFFFF"+
			"\x1\x66\x1\x75\x1\xFFFF\x2\x39\xC\xFFFF\x1\x73\x2\xFFFF\x1\x7A\x1\x6E"+
			"\x2\xFFFF\x1\x65\x1\xFFFF\x1\x63\x2\x7A\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x3\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x4\xFFFF\x1"+
			"\x14\x1\xFFFF\x1\x17\x1\x18\x2\xFFFF\x1\x1B\x2\xFFFF\x1\x1D\x1\x1E\x1"+
			"\x2\x1\x1\x1\x3\x1\x4\x1\xE\x1\xD\x1\x10\x1\xF\x1\x12\x1\x11\x1\xFFFF"+
			"\x1\x16\x1\x15\x2\xFFFF\x1\x1C\x1\x1F\x1\xFFFF\x1\x19\x3\xFFFF\x1\x13"+
			"\x1\x1A";
		private const string DFA7_specialS =
			"\x32\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x19\x2\xFFFF\x1\x19\x12\xFFFF\x1\x19\x1\x1\x1\x12\x3\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x3\x1\x4\x1\x5\x1\x6\x1\x7\x1\x8\x1\x17\x1\x9\xA\x16\x1"+
				"\xFFFF\x1\xA\x1\xB\x1\xC\x1\xD\x2\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF"+
				"\x4\x15\x1\xE\x1\x14\x2\x15\x1\x13\x11\x15\x1\xF\x1\x10\x1\x11",
				"\x1\x1A",
				"\x1\x1C",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x1E",
				"\x1\x20",
				"\x1\x22",
				"\x1\x24",
				"",
				"\x1\x25",
				"",
				"",
				"\x1\x27",
				"\x1\x28",
				"",
				"\x1\x18\x1\xFFFF\xA\x16",
				"\xA\x18",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2B",
				"",
				"",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\x1\x2D",
				"",
				"",
				"\x1\x2E",
				"",
				"\x1\x2F",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | STRING | IF | FUNC | ID | INT | FLOAT | WS | DOT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Chunky 
