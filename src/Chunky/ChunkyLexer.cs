//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 Chunky.g 2011-09-08 18:57:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;

namespace  Chunky 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class ChunkyLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AMPER=4;
	public const int ARGS=5;
	public const int ASSIGN=6;
	public const int BLOCK=7;
	public const int CALL=8;
	public const int COMMA=9;
	public const int DAMPER=10;
	public const int DIGIT=11;
	public const int DOT=12;
	public const int DPIPE=13;
	public const int EQUAL=14;
	public const int FLOAT=15;
	public const int FUNC=16;
	public const int GREATER=17;
	public const int GREATEREQUAL=18;
	public const int ID=19;
	public const int IF=20;
	public const int INT=21;
	public const int LCURLY=22;
	public const int LESS=23;
	public const int LESSEQUAL=24;
	public const int LETTER=25;
	public const int LPAREN=26;
	public const int MINUS=27;
	public const int NOTEQUAL=28;
	public const int PARAMS=29;
	public const int PERCENT=30;
	public const int PIPE=31;
	public const int PLUS=32;
	public const int RCURLY=33;
	public const int RPAREN=34;
	public const int SEMI=35;
	public const int SLASH=36;
	public const int STAR=37;
	public const int STRING=38;
	public const int WS=39;
	public const int T__40=40;
	public const int T__41=41;

    // delegates
    // delegators

	public ChunkyLexer()
	{
		OnCreated();
	}

	public ChunkyLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ChunkyLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{


		OnCreated();
	}
	public override string GrammarFileName { get { return "Chunky.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__40();
	partial void LeaveRule_T__40();

	// $ANTLR start "T__40"
	[GrammarRule("T__40")]
	private void mT__40()
	{
		EnterRule_T__40();
		EnterRule("T__40", 1);
		TraceIn("T__40", 1);
		try
		{
			int _type = T__40;
			int _channel = DefaultTokenChannel;
			// Chunky.g:9:7: ( '!' )
			DebugEnterAlt(1);
			// Chunky.g:9:9: '!'
			{
			DebugLocation(9, 9);
			Match('!'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__40", 1);
			LeaveRule("T__40", 1);
			LeaveRule_T__40();
		}
	}
	// $ANTLR end "T__40"

	partial void EnterRule_T__41();
	partial void LeaveRule_T__41();

	// $ANTLR start "T__41"
	[GrammarRule("T__41")]
	private void mT__41()
	{
		EnterRule_T__41();
		EnterRule("T__41", 2);
		TraceIn("T__41", 2);
		try
		{
			int _type = T__41;
			int _channel = DefaultTokenChannel;
			// Chunky.g:10:7: ( 'else' )
			DebugEnterAlt(1);
			// Chunky.g:10:9: 'else'
			{
			DebugLocation(10, 9);
			Match("else"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__41", 2);
			LeaveRule("T__41", 2);
			LeaveRule_T__41();
		}
	}
	// $ANTLR end "T__41"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 3);
		TraceIn("IF", 3);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// Chunky.g:96:4: ( 'if' )
			DebugEnterAlt(1);
			// Chunky.g:96:6: 'if'
			{
			DebugLocation(96, 6);
			Match("if"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 3);
			LeaveRule("IF", 3);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_FUNC();
	partial void LeaveRule_FUNC();

	// $ANTLR start "FUNC"
	[GrammarRule("FUNC")]
	private void mFUNC()
	{
		EnterRule_FUNC();
		EnterRule("FUNC", 4);
		TraceIn("FUNC", 4);
		try
		{
			int _type = FUNC;
			int _channel = DefaultTokenChannel;
			// Chunky.g:98:5: ( 'func' )
			DebugEnterAlt(1);
			// Chunky.g:98:7: 'func'
			{
			DebugLocation(98, 7);
			Match("func"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNC", 4);
			LeaveRule("FUNC", 4);
			LeaveRule_FUNC();
		}
	}
	// $ANTLR end "FUNC"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 5);
		TraceIn("LPAREN", 5);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// Chunky.g:100:8: ( '(' )
			DebugEnterAlt(1);
			// Chunky.g:100:10: '('
			{
			DebugLocation(100, 10);
			Match('('); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 5);
			LeaveRule("LPAREN", 5);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 6);
		TraceIn("RPAREN", 6);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// Chunky.g:102:8: ( ')' )
			DebugEnterAlt(1);
			// Chunky.g:102:10: ')'
			{
			DebugLocation(102, 10);
			Match(')'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 6);
			LeaveRule("RPAREN", 6);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 7);
		TraceIn("COMMA", 7);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// Chunky.g:104:7: ( ',' )
			DebugEnterAlt(1);
			// Chunky.g:104:9: ','
			{
			DebugLocation(104, 9);
			Match(','); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 7);
			LeaveRule("COMMA", 7);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_SEMI();
	partial void LeaveRule_SEMI();

	// $ANTLR start "SEMI"
	[GrammarRule("SEMI")]
	private void mSEMI()
	{
		EnterRule_SEMI();
		EnterRule("SEMI", 8);
		TraceIn("SEMI", 8);
		try
		{
			int _type = SEMI;
			int _channel = DefaultTokenChannel;
			// Chunky.g:106:7: ( ';' )
			DebugEnterAlt(1);
			// Chunky.g:106:9: ';'
			{
			DebugLocation(106, 9);
			Match(';'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMI", 8);
			LeaveRule("SEMI", 8);
			LeaveRule_SEMI();
		}
	}
	// $ANTLR end "SEMI"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 9);
		TraceIn("PLUS", 9);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// Chunky.g:108:7: ( '+' )
			DebugEnterAlt(1);
			// Chunky.g:108:9: '+'
			{
			DebugLocation(108, 9);
			Match('+'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 9);
			LeaveRule("PLUS", 9);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 10);
		TraceIn("MINUS", 10);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// Chunky.g:110:10: ( '-' )
			DebugEnterAlt(1);
			// Chunky.g:110:12: '-'
			{
			DebugLocation(110, 12);
			Match('-'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 10);
			LeaveRule("MINUS", 10);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_STAR();
	partial void LeaveRule_STAR();

	// $ANTLR start "STAR"
	[GrammarRule("STAR")]
	private void mSTAR()
	{
		EnterRule_STAR();
		EnterRule("STAR", 11);
		TraceIn("STAR", 11);
		try
		{
			int _type = STAR;
			int _channel = DefaultTokenChannel;
			// Chunky.g:112:9: ( '*' )
			DebugEnterAlt(1);
			// Chunky.g:112:11: '*'
			{
			DebugLocation(112, 11);
			Match('*'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STAR", 11);
			LeaveRule("STAR", 11);
			LeaveRule_STAR();
		}
	}
	// $ANTLR end "STAR"

	partial void EnterRule_SLASH();
	partial void LeaveRule_SLASH();

	// $ANTLR start "SLASH"
	[GrammarRule("SLASH")]
	private void mSLASH()
	{
		EnterRule_SLASH();
		EnterRule("SLASH", 12);
		TraceIn("SLASH", 12);
		try
		{
			int _type = SLASH;
			int _channel = DefaultTokenChannel;
			// Chunky.g:114:10: ( '/' )
			DebugEnterAlt(1);
			// Chunky.g:114:12: '/'
			{
			DebugLocation(114, 12);
			Match('/'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SLASH", 12);
			LeaveRule("SLASH", 12);
			LeaveRule_SLASH();
		}
	}
	// $ANTLR end "SLASH"

	partial void EnterRule_PIPE();
	partial void LeaveRule_PIPE();

	// $ANTLR start "PIPE"
	[GrammarRule("PIPE")]
	private void mPIPE()
	{
		EnterRule_PIPE();
		EnterRule("PIPE", 13);
		TraceIn("PIPE", 13);
		try
		{
			int _type = PIPE;
			int _channel = DefaultTokenChannel;
			// Chunky.g:116:6: ( '|' )
			DebugEnterAlt(1);
			// Chunky.g:116:8: '|'
			{
			DebugLocation(116, 8);
			Match('|'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PIPE", 13);
			LeaveRule("PIPE", 13);
			LeaveRule_PIPE();
		}
	}
	// $ANTLR end "PIPE"

	partial void EnterRule_DPIPE();
	partial void LeaveRule_DPIPE();

	// $ANTLR start "DPIPE"
	[GrammarRule("DPIPE")]
	private void mDPIPE()
	{
		EnterRule_DPIPE();
		EnterRule("DPIPE", 14);
		TraceIn("DPIPE", 14);
		try
		{
			int _type = DPIPE;
			int _channel = DefaultTokenChannel;
			// Chunky.g:118:7: ( '||' )
			DebugEnterAlt(1);
			// Chunky.g:118:9: '||'
			{
			DebugLocation(118, 9);
			Match("||"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DPIPE", 14);
			LeaveRule("DPIPE", 14);
			LeaveRule_DPIPE();
		}
	}
	// $ANTLR end "DPIPE"

	partial void EnterRule_AMPER();
	partial void LeaveRule_AMPER();

	// $ANTLR start "AMPER"
	[GrammarRule("AMPER")]
	private void mAMPER()
	{
		EnterRule_AMPER();
		EnterRule("AMPER", 15);
		TraceIn("AMPER", 15);
		try
		{
			int _type = AMPER;
			int _channel = DefaultTokenChannel;
			// Chunky.g:120:10: ( '&' )
			DebugEnterAlt(1);
			// Chunky.g:120:12: '&'
			{
			DebugLocation(120, 12);
			Match('&'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AMPER", 15);
			LeaveRule("AMPER", 15);
			LeaveRule_AMPER();
		}
	}
	// $ANTLR end "AMPER"

	partial void EnterRule_DAMPER();
	partial void LeaveRule_DAMPER();

	// $ANTLR start "DAMPER"
	[GrammarRule("DAMPER")]
	private void mDAMPER()
	{
		EnterRule_DAMPER();
		EnterRule("DAMPER", 16);
		TraceIn("DAMPER", 16);
		try
		{
			int _type = DAMPER;
			int _channel = DefaultTokenChannel;
			// Chunky.g:122:8: ( '&&' )
			DebugEnterAlt(1);
			// Chunky.g:122:10: '&&'
			{
			DebugLocation(122, 10);
			Match("&&"); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DAMPER", 16);
			LeaveRule("DAMPER", 16);
			LeaveRule_DAMPER();
		}
	}
	// $ANTLR end "DAMPER"

	partial void EnterRule_LESS();
	partial void LeaveRule_LESS();

	// $ANTLR start "LESS"
	[GrammarRule("LESS")]
	private void mLESS()
	{
		EnterRule_LESS();
		EnterRule("LESS", 17);
		TraceIn("LESS", 17);
		try
		{
			int _type = LESS;
			int _channel = DefaultTokenChannel;
			// Chunky.g:124:9: ( '<' )
			DebugEnterAlt(1);
			// Chunky.g:124:11: '<'
			{
			DebugLocation(124, 11);
			Match('<'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS", 17);
			LeaveRule("LESS", 17);
			LeaveRule_LESS();
		}
	}
	// $ANTLR end "LESS"

	partial void EnterRule_GREATER();
	partial void LeaveRule_GREATER();

	// $ANTLR start "GREATER"
	[GrammarRule("GREATER")]
	private void mGREATER()
	{
		EnterRule_GREATER();
		EnterRule("GREATER", 18);
		TraceIn("GREATER", 18);
		try
		{
			int _type = GREATER;
			int _channel = DefaultTokenChannel;
			// Chunky.g:126:12: ( '>' )
			DebugEnterAlt(1);
			// Chunky.g:126:14: '>'
			{
			DebugLocation(126, 14);
			Match('>'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER", 18);
			LeaveRule("GREATER", 18);
			LeaveRule_GREATER();
		}
	}
	// $ANTLR end "GREATER"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 19);
		TraceIn("ASSIGN", 19);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// Chunky.g:128:11: ( '=' )
			DebugEnterAlt(1);
			// Chunky.g:128:13: '='
			{
			DebugLocation(128, 13);
			Match('='); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 19);
			LeaveRule("ASSIGN", 19);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_PERCENT();
	partial void LeaveRule_PERCENT();

	// $ANTLR start "PERCENT"
	[GrammarRule("PERCENT")]
	private void mPERCENT()
	{
		EnterRule_PERCENT();
		EnterRule("PERCENT", 20);
		TraceIn("PERCENT", 20);
		try
		{
			int _type = PERCENT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:130:12: ( '%' )
			DebugEnterAlt(1);
			// Chunky.g:130:14: '%'
			{
			DebugLocation(130, 14);
			Match('%'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PERCENT", 20);
			LeaveRule("PERCENT", 20);
			LeaveRule_PERCENT();
		}
	}
	// $ANTLR end "PERCENT"

	partial void EnterRule_LCURLY();
	partial void LeaveRule_LCURLY();

	// $ANTLR start "LCURLY"
	[GrammarRule("LCURLY")]
	private void mLCURLY()
	{
		EnterRule_LCURLY();
		EnterRule("LCURLY", 21);
		TraceIn("LCURLY", 21);
		try
		{
			int _type = LCURLY;
			int _channel = DefaultTokenChannel;
			// Chunky.g:132:11: ( '{' )
			DebugEnterAlt(1);
			// Chunky.g:132:13: '{'
			{
			DebugLocation(132, 13);
			Match('{'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LCURLY", 21);
			LeaveRule("LCURLY", 21);
			LeaveRule_LCURLY();
		}
	}
	// $ANTLR end "LCURLY"

	partial void EnterRule_RCURLY();
	partial void LeaveRule_RCURLY();

	// $ANTLR start "RCURLY"
	[GrammarRule("RCURLY")]
	private void mRCURLY()
	{
		EnterRule_RCURLY();
		EnterRule("RCURLY", 22);
		TraceIn("RCURLY", 22);
		try
		{
			int _type = RCURLY;
			int _channel = DefaultTokenChannel;
			// Chunky.g:134:11: ( '}' )
			DebugEnterAlt(1);
			// Chunky.g:134:13: '}'
			{
			DebugLocation(134, 13);
			Match('}'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RCURLY", 22);
			LeaveRule("RCURLY", 22);
			LeaveRule_RCURLY();
		}
	}
	// $ANTLR end "RCURLY"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 23);
		TraceIn("EQUAL", 23);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// Chunky.g:136:10: ( '==' )
			DebugEnterAlt(1);
			// Chunky.g:136:12: '=='
			{
			DebugLocation(136, 12);
			Match("=="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 23);
			LeaveRule("EQUAL", 23);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_NOTEQUAL();
	partial void LeaveRule_NOTEQUAL();

	// $ANTLR start "NOTEQUAL"
	[GrammarRule("NOTEQUAL")]
	private void mNOTEQUAL()
	{
		EnterRule_NOTEQUAL();
		EnterRule("NOTEQUAL", 24);
		TraceIn("NOTEQUAL", 24);
		try
		{
			int _type = NOTEQUAL;
			int _channel = DefaultTokenChannel;
			// Chunky.g:138:13: ( '!=' )
			DebugEnterAlt(1);
			// Chunky.g:138:15: '!='
			{
			DebugLocation(138, 15);
			Match("!="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQUAL", 24);
			LeaveRule("NOTEQUAL", 24);
			LeaveRule_NOTEQUAL();
		}
	}
	// $ANTLR end "NOTEQUAL"

	partial void EnterRule_LESSEQUAL();
	partial void LeaveRule_LESSEQUAL();

	// $ANTLR start "LESSEQUAL"
	[GrammarRule("LESSEQUAL")]
	private void mLESSEQUAL()
	{
		EnterRule_LESSEQUAL();
		EnterRule("LESSEQUAL", 25);
		TraceIn("LESSEQUAL", 25);
		try
		{
			int _type = LESSEQUAL;
			int _channel = DefaultTokenChannel;
			// Chunky.g:140:14: ( '<=' )
			DebugEnterAlt(1);
			// Chunky.g:140:16: '<='
			{
			DebugLocation(140, 16);
			Match("<="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESSEQUAL", 25);
			LeaveRule("LESSEQUAL", 25);
			LeaveRule_LESSEQUAL();
		}
	}
	// $ANTLR end "LESSEQUAL"

	partial void EnterRule_GREATEREQUAL();
	partial void LeaveRule_GREATEREQUAL();

	// $ANTLR start "GREATEREQUAL"
	[GrammarRule("GREATEREQUAL")]
	private void mGREATEREQUAL()
	{
		EnterRule_GREATEREQUAL();
		EnterRule("GREATEREQUAL", 26);
		TraceIn("GREATEREQUAL", 26);
		try
		{
			int _type = GREATEREQUAL;
			int _channel = DefaultTokenChannel;
			// Chunky.g:142:17: ( '>=' )
			DebugEnterAlt(1);
			// Chunky.g:142:19: '>='
			{
			DebugLocation(142, 19);
			Match(">="); if (state.failed) return;


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATEREQUAL", 26);
			LeaveRule("GREATEREQUAL", 26);
			LeaveRule_GREATEREQUAL();
		}
	}
	// $ANTLR end "GREATEREQUAL"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 27);
		TraceIn("DOT", 27);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:144:5: ( '.' )
			DebugEnterAlt(1);
			// Chunky.g:144:7: '.'
			{
			DebugLocation(144, 7);
			Match('.'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 27);
			LeaveRule("DOT", 27);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_LETTER();
	partial void LeaveRule_LETTER();

	// $ANTLR start "LETTER"
	[GrammarRule("LETTER")]
	private void mLETTER()
	{
		EnterRule_LETTER();
		EnterRule("LETTER", 28);
		TraceIn("LETTER", 28);
		try
		{
			// Chunky.g:149:8: ( ( 'a' .. 'z' | 'A' .. 'Z' ) )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(149, 8);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("LETTER", 28);
			LeaveRule("LETTER", 28);
			LeaveRule_LETTER();
		}
	}
	// $ANTLR end "LETTER"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 29);
		TraceIn("DIGIT", 29);
		try
		{
			// Chunky.g:152:7: ( '0' .. '9' )
			DebugEnterAlt(1);
			// Chunky.g:
			{
			DebugLocation(152, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}


			}

		}
		finally
		{
			TraceOut("DIGIT", 29);
			LeaveRule("DIGIT", 29);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 30);
		TraceIn("STRING", 30);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// Chunky.g:153:8: ( '\"' (~ '\"' | '\\\\\"' )* '\"' )
			DebugEnterAlt(1);
			// Chunky.g:153:10: '\"' (~ '\"' | '\\\\\"' )* '\"'
			{
			DebugLocation(153, 10);
			Match('\"'); if (state.failed) return;
			DebugLocation(153, 14);
			// Chunky.g:153:14: (~ '\"' | '\\\\\"' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=3;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0=='\\'))
				{
					int LA1_2 = input.LA(2);

					if ((LA1_2=='\"'))
					{
						int LA1_4 = input.LA(3);

						if (((LA1_4>='\u0000' && LA1_4<='\uFFFF')))
						{
							alt1 = 2;
						}

						else
						{
							alt1 = 1;
						}

					}
					else if (((LA1_2>='\u0000' && LA1_2<='!')||(LA1_2>='#' && LA1_2<='\uFFFF')))
					{
						alt1 = 1;
					}


				}
				else if (((LA1_0>='\u0000' && LA1_0<='!')||(LA1_0>='#' && LA1_0<='[')||(LA1_0>=']' && LA1_0<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:153:15: ~ '\"'
					{
					DebugLocation(153, 15);
					input.Consume();
					state.failed=false;

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Chunky.g:153:20: '\\\\\"'
					{
					DebugLocation(153, 20);
					Match("\\\""); if (state.failed) return;


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(153, 28);
			Match('\"'); if (state.failed) return;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 30);
			LeaveRule("STRING", 30);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 31);
		TraceIn("ID", 31);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// Chunky.g:155:4: ( ( LETTER | '_' ) ( LETTER | DIGIT | '_' )* )
			DebugEnterAlt(1);
			// Chunky.g:155:6: ( LETTER | '_' ) ( LETTER | DIGIT | '_' )*
			{
			DebugLocation(155, 6);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(155, 21);
			// Chunky.g:155:21: ( LETTER | DIGIT | '_' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(155, 21);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 31);
			LeaveRule("ID", 31);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 32);
		TraceIn("INT", 32);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:157:5: ( ( DIGIT )+ )
			DebugEnterAlt(1);
			// Chunky.g:157:7: ( DIGIT )+
			{
			DebugLocation(157, 7);
			// Chunky.g:157:7: ( DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(157, 7);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 32);
			LeaveRule("INT", 32);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_FLOAT();
	partial void LeaveRule_FLOAT();

	// $ANTLR start "FLOAT"
	[GrammarRule("FLOAT")]
	private void mFLOAT()
	{
		EnterRule_FLOAT();
		EnterRule("FLOAT", 33);
		TraceIn("FLOAT", 33);
		try
		{
			int _type = FLOAT;
			int _channel = DefaultTokenChannel;
			// Chunky.g:159:7: ( ( DIGIT )* ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |) )
			DebugEnterAlt(1);
			// Chunky.g:159:9: ( DIGIT )* ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |)
			{
			DebugLocation(159, 9);
			// Chunky.g:159:9: ( DIGIT )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if (((LA4_0>='0' && LA4_0<='9')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(159, 9);
					input.Consume();
					state.failed=false;

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(159, 18);
			// Chunky.g:159:18: ( ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ ) |)
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='.') && (EvaluatePredicate(synpred1_Chunky_fragment)))
			{
				alt6 = 1;
			}
			else
			{
				alt6 = 2;}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// Chunky.g:159:19: ( '.' ( DIGIT )+ )=> ( '.' ( DIGIT )+ )
				{
				DebugLocation(159, 33);
				// Chunky.g:159:33: ( '.' ( DIGIT )+ )
				DebugEnterAlt(1);
				// Chunky.g:159:34: '.' ( DIGIT )+
				{
				DebugLocation(159, 34);
				Match('.'); if (state.failed) return;
				DebugLocation(159, 38);
				// Chunky.g:159:38: ( DIGIT )+
				int cnt5=0;
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_0 = input.LA(1);

					if (((LA5_0>='0' && LA5_0<='9')))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch (alt5)
					{
					case 1:
						DebugEnterAlt(1);
						// Chunky.g:
						{
						DebugLocation(159, 38);
						input.Consume();
						state.failed=false;

						}
						break;

					default:
						if (cnt5 >= 1)
							goto loop5;

						if (state.backtracking>0) {state.failed=true; return;}
						EarlyExitException eee5 = new EarlyExitException( 5, input );
						DebugRecognitionException(eee5);
						throw eee5;
					}
					cnt5++;
				}
				loop5:
					;

				} finally { DebugExitSubRule(5); }


				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Chunky.g:159:48: 
				{
				DebugLocation(159, 48);
				if (state.backtracking == 0)
				{
					 _type = INT; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FLOAT", 33);
			LeaveRule("FLOAT", 33);
			LeaveRule_FLOAT();
		}
	}
	// $ANTLR end "FLOAT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 34);
		TraceIn("WS", 34);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// Chunky.g:162:4: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// Chunky.g:162:6: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(162, 6);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;}

			DebugLocation(166, 5);
			if (state.backtracking == 0)
			{
				_channel=99;
			}

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 34);
			LeaveRule("WS", 34);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	public override void mTokens()
	{
		// Chunky.g:1:8: ( T__40 | T__41 | IF | FUNC | LPAREN | RPAREN | COMMA | SEMI | PLUS | MINUS | STAR | SLASH | PIPE | DPIPE | AMPER | DAMPER | LESS | GREATER | ASSIGN | PERCENT | LCURLY | RCURLY | EQUAL | NOTEQUAL | LESSEQUAL | GREATEREQUAL | DOT | STRING | ID | INT | FLOAT | WS )
		int alt7=32;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// Chunky.g:1:10: T__40
			{
			DebugLocation(1, 10);
			mT__40(); if (state.failed) return;

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// Chunky.g:1:16: T__41
			{
			DebugLocation(1, 16);
			mT__41(); if (state.failed) return;

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// Chunky.g:1:22: IF
			{
			DebugLocation(1, 22);
			mIF(); if (state.failed) return;

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// Chunky.g:1:25: FUNC
			{
			DebugLocation(1, 25);
			mFUNC(); if (state.failed) return;

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// Chunky.g:1:30: LPAREN
			{
			DebugLocation(1, 30);
			mLPAREN(); if (state.failed) return;

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// Chunky.g:1:37: RPAREN
			{
			DebugLocation(1, 37);
			mRPAREN(); if (state.failed) return;

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// Chunky.g:1:44: COMMA
			{
			DebugLocation(1, 44);
			mCOMMA(); if (state.failed) return;

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// Chunky.g:1:50: SEMI
			{
			DebugLocation(1, 50);
			mSEMI(); if (state.failed) return;

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// Chunky.g:1:55: PLUS
			{
			DebugLocation(1, 55);
			mPLUS(); if (state.failed) return;

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// Chunky.g:1:60: MINUS
			{
			DebugLocation(1, 60);
			mMINUS(); if (state.failed) return;

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// Chunky.g:1:66: STAR
			{
			DebugLocation(1, 66);
			mSTAR(); if (state.failed) return;

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// Chunky.g:1:71: SLASH
			{
			DebugLocation(1, 71);
			mSLASH(); if (state.failed) return;

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// Chunky.g:1:77: PIPE
			{
			DebugLocation(1, 77);
			mPIPE(); if (state.failed) return;

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// Chunky.g:1:82: DPIPE
			{
			DebugLocation(1, 82);
			mDPIPE(); if (state.failed) return;

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// Chunky.g:1:88: AMPER
			{
			DebugLocation(1, 88);
			mAMPER(); if (state.failed) return;

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// Chunky.g:1:94: DAMPER
			{
			DebugLocation(1, 94);
			mDAMPER(); if (state.failed) return;

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// Chunky.g:1:101: LESS
			{
			DebugLocation(1, 101);
			mLESS(); if (state.failed) return;

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// Chunky.g:1:106: GREATER
			{
			DebugLocation(1, 106);
			mGREATER(); if (state.failed) return;

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// Chunky.g:1:114: ASSIGN
			{
			DebugLocation(1, 114);
			mASSIGN(); if (state.failed) return;

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// Chunky.g:1:121: PERCENT
			{
			DebugLocation(1, 121);
			mPERCENT(); if (state.failed) return;

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// Chunky.g:1:129: LCURLY
			{
			DebugLocation(1, 129);
			mLCURLY(); if (state.failed) return;

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// Chunky.g:1:136: RCURLY
			{
			DebugLocation(1, 136);
			mRCURLY(); if (state.failed) return;

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// Chunky.g:1:143: EQUAL
			{
			DebugLocation(1, 143);
			mEQUAL(); if (state.failed) return;

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// Chunky.g:1:149: NOTEQUAL
			{
			DebugLocation(1, 149);
			mNOTEQUAL(); if (state.failed) return;

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// Chunky.g:1:158: LESSEQUAL
			{
			DebugLocation(1, 158);
			mLESSEQUAL(); if (state.failed) return;

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// Chunky.g:1:168: GREATEREQUAL
			{
			DebugLocation(1, 168);
			mGREATEREQUAL(); if (state.failed) return;

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// Chunky.g:1:181: DOT
			{
			DebugLocation(1, 181);
			mDOT(); if (state.failed) return;

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// Chunky.g:1:185: STRING
			{
			DebugLocation(1, 185);
			mSTRING(); if (state.failed) return;

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// Chunky.g:1:192: ID
			{
			DebugLocation(1, 192);
			mID(); if (state.failed) return;

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// Chunky.g:1:195: INT
			{
			DebugLocation(1, 195);
			mINT(); if (state.failed) return;

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// Chunky.g:1:199: FLOAT
			{
			DebugLocation(1, 199);
			mFLOAT(); if (state.failed) return;

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// Chunky.g:1:205: WS
			{
			DebugLocation(1, 205);
			mWS(); if (state.failed) return;

			}
			break;

		}

	}

	partial void EnterRule_synpred1_Chunky_fragment();
	partial void LeaveRule_synpred1_Chunky_fragment();

	// $ANTLR start synpred1_Chunky
	public void synpred1_Chunky_fragment()
	{
		EnterRule_synpred1_Chunky_fragment();
		EnterRule("synpred1_Chunky_fragment", 36);
		TraceIn("synpred1_Chunky_fragment", 36);
		try
		{
			// Chunky.g:159:19: ( '.' ( DIGIT )+ )
			DebugEnterAlt(1);
			// Chunky.g:159:20: '.' ( DIGIT )+
			{
			DebugLocation(159, 20);
			Match('.'); if (state.failed) return;
			DebugLocation(159, 24);
			// Chunky.g:159:24: ( DIGIT )+
			int cnt8=0;
			try { DebugEnterSubRule(8);
			while (true)
			{
				int alt8=2;
				try { DebugEnterDecision(8, false);
				int LA8_0 = input.LA(1);

				if (((LA8_0>='0' && LA8_0<='9')))
				{
					alt8 = 1;
				}


				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// Chunky.g:
					{
					DebugLocation(159, 24);
					if ((input.LA(1)>='0' && input.LA(1)<='9'))
					{
						input.Consume();
					state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						Recover(mse);
						throw mse;}


					}
					break;

				default:
					if (cnt8 >= 1)
						goto loop8;

					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee8 = new EarlyExitException( 8, input );
					DebugRecognitionException(eee8);
					throw eee8;
				}
				cnt8++;
			}
			loop8:
				;

			} finally { DebugExitSubRule(8); }


			}

		}
		finally
		{
			TraceOut("synpred1_Chunky_fragment", 36);
			LeaveRule("synpred1_Chunky_fragment", 36);
			LeaveRule_synpred1_Chunky_fragment();
		}
	}
	// $ANTLR end synpred1_Chunky

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x1\x19\x1\x1C\x3\x17\x8\xFFFF\x1\x21\x1\x23\x1\x25\x1\x27\x1\x29\x3"+
			"\xFFFF\x1\x2A\x2\xFFFF\x1\x2B\x4\xFFFF\x1\x17\x1\x2D\x1\x17\xC\xFFFF"+
			"\x1\x17\x1\xFFFF\x1\x17\x1\x31\x1\x32\x2\xFFFF";
		private const string DFA7_eofS =
			"\x33\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x1\x3D\x1\x6C\x1\x66\x1\x75\x8\xFFFF\x1\x7C\x1\x26\x3\x3D\x3\xFFFF"+
			"\x1\x30\x2\xFFFF\x1\x2E\x4\xFFFF\x1\x73\x1\x30\x1\x6E\xC\xFFFF\x1\x65"+
			"\x1\xFFFF\x1\x63\x2\x30\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x7D\x1\x3D\x1\x6C\x1\x66\x1\x75\x8\xFFFF\x1\x7C\x1\x26\x3\x3D\x3"+
			"\xFFFF\x1\x39\x2\xFFFF\x1\x39\x4\xFFFF\x1\x73\x1\x7A\x1\x6E\xC\xFFFF"+
			"\x1\x65\x1\xFFFF\x1\x63\x2\x7A\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x5\xFFFF\x1\x5\x1\x6\x1\x7\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x5\xFFFF\x1"+
			"\x14\x1\x15\x1\x16\x1\xFFFF\x1\x1C\x1\x1D\x1\xFFFF\x1\x1F\x1\x20\x1\x18"+
			"\x1\x1\x3\xFFFF\x1\xE\x1\xD\x1\x10\x1\xF\x1\x19\x1\x11\x1\x1A\x1\x12"+
			"\x1\x17\x1\x13\x1\x1B\x1\x1E\x1\xFFFF\x1\x3\x3\xFFFF\x1\x2\x1\x4";
		private const string DFA7_specialS =
			"\x33\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x1A\x2\xFFFF\x1\x1A\x12\xFFFF\x1\x1A\x1\x1\x1\x16\x2\xFFFF\x1\x12"+
				"\x1\xE\x1\xFFFF\x1\x5\x1\x6\x1\xB\x1\x9\x1\x7\x1\xA\x1\x15\x1\xC\xA"+
				"\x18\x1\xFFFF\x1\x8\x1\xF\x1\x11\x1\x10\x2\xFFFF\x1A\x17\x4\xFFFF\x1"+
				"\x17\x1\xFFFF\x4\x17\x1\x2\x1\x4\x2\x17\x1\x3\x11\x17\x1\x13\x1\xD\x1"+
				"\x14",
				"\x1\x1B",
				"\x1\x1D",
				"\x1\x1E",
				"\x1\x1F",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x20",
				"\x1\x22",
				"\x1\x24",
				"\x1\x26",
				"\x1\x28",
				"",
				"",
				"",
				"\xA\x19",
				"",
				"",
				"\x1\x19\x1\xFFFF\xA\x18",
				"",
				"",
				"",
				"",
				"\x1\x2C",
				"\xA\x17\x7\xFFFF\x1A\x17\x4\xFFFF\x1\x17\x1\xFFFF\x1A\x17",
				"\x1\x2E",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2F",
				"",
				"\x1\x30",
				"\xA\x17\x7\xFFFF\x1A\x17\x4\xFFFF\x1\x17\x1\xFFFF\x1A\x17",
				"\xA\x17\x7\xFFFF\x1A\x17\x4\xFFFF\x1\x17\x1\xFFFF\x1A\x17",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__40 | T__41 | IF | FUNC | LPAREN | RPAREN | COMMA | SEMI | PLUS | MINUS | STAR | SLASH | PIPE | DPIPE | AMPER | DAMPER | LESS | GREATER | ASSIGN | PERCENT | LCURLY | RCURLY | EQUAL | NOTEQUAL | LESSEQUAL | GREATEREQUAL | DOT | STRING | ID | INT | FLOAT | WS );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  Chunky 
