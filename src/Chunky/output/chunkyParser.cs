//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Source\\chunky\\src\\Chunky\\chunky.g 2011-09-08 14:09:25

#define ANTLR_DEBUG
// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

using Antlr.Runtime.Debug;
using IOException = System.IO.IOException;

using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class chunkyParser : DebugAntlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ARGS", "BLOCK", "CALL", "DIGIT", "DOT", "FLOAT", "FUNC", "ID", "IF", "INT", "LETTER", "PARAMS", "STRING", "WS", "'!'", "'!='", "'&&'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'='", "'=='", "'>'", "'>='", "'else'", "'{'", "'|'", "'||'", "'}'"
	};
	public const int EOF=-1;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int ARGS=4;
	public const int BLOCK=5;
	public const int CALL=6;
	public const int DIGIT=7;
	public const int DOT=8;
	public const int FLOAT=9;
	public const int FUNC=10;
	public const int ID=11;
	public const int IF=12;
	public const int INT=13;
	public const int LETTER=14;
	public const int PARAMS=15;
	public const int STRING=16;
	public const int WS=17;

	public static readonly string[] ruleNames =
		new string[]
		{
			"invalidRule", "dot", "params", "bool", "term", "add", "exprs", "expr", 
		"not", "if_expr", "program", "args", "comp", "mul", "func_expr", "call", 
		"block"
		};

		int ruleLevel = 0;
		public virtual int RuleLevel { get { return ruleLevel; } }
		public virtual void IncRuleLevel() { ruleLevel++; }
		public virtual void DecRuleLevel() { ruleLevel--; }
		public chunkyParser( ITokenStream input )
			: this( input, DebugEventSocketProxy.DefaultDebuggerPort, new RecognizerSharedState() )
		{
		}
		public chunkyParser( ITokenStream input, int port, RecognizerSharedState state )
			: base( input, state )
		{
			DebugEventSocketProxy proxy = new DebugEventSocketProxy( this, port, adaptor );
			DebugListener = proxy;
			ITokenStream = new DebugITokenStream( input, proxy );
			try
			{
				proxy.Handshake();
			}
			catch ( IOException ioe )
			{
				ReportError( ioe );
			}
			ITreeAdaptor adap = new CommonTreeAdaptor();
			TreeAdaptor = adap;
			proxy.TreeAdaptor = adap;
		}

	public chunkyParser( ITokenStream input, IDebugEventListener dbg )
		: base( input, dbg )
	{
		ITreeAdaptor adap = new CommonTreeAdaptor();
		TreeAdaptor = adap;


	}

	protected virtual bool EvalPredicate( bool result, string predicate )
	{
		dbg.SemanticPredicate( result, predicate );
		return result;
	}

	protected DebugTreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}
		set
		{
			this.adaptor = new DebugTreeAdaptor(dbg,adaptor);


		}
	}


	public override string[] TokenNames { get { return chunkyParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Source\\chunky\\src\\Chunky\\chunky.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_program() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_program() {}

	// $ANTLR start "program"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:14:1: program : exprs ;
	[GrammarRule("program")]
	private AstParserRuleReturnScope<CommonTree, IToken> program()
	{
		EnterRule_program();
		EnterRule("program", 1);
		TraceIn("program", 1);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> exprs1 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "program");
		DebugLocation(14, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:15:2: ( exprs )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:15:4: exprs
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(15, 4);
			PushFollow(Follow._exprs_in_program61);
			exprs1=exprs();
			PopFollow();

			adaptor.AddChild(root_0, exprs1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("program", 1);
			LeaveRule("program", 1);
			LeaveRule_program();
	    }
	 	DebugLocation(16, 1);
		} finally { DebugExitRule(GrammarFileName, "program"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "program"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_params() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_params() {}

	// $ANTLR start "params"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:18:1: params : (p+= ID ( ',' p+= ID )* )? -> ^( PARAMS ( $p)* ) ;
	[GrammarRule("params")]
	private AstParserRuleReturnScope<CommonTree, IToken> @params()
	{
		EnterRule_params();
		EnterRule("params", 2);
		TraceIn("params", 2);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal2 = default(IToken);
	    IToken p = default(IToken);
	    List<IToken> list_p = null;

	    CommonTree char_literal2_tree = default(CommonTree);
	    CommonTree p_tree = default(CommonTree);
	    RewriteRuleITokenStream stream_ID=new RewriteRuleITokenStream(adaptor,"token ID");
	    RewriteRuleITokenStream stream_26=new RewriteRuleITokenStream(adaptor,"token 26");

		try { DebugEnterRule(GrammarFileName, "params");
		DebugLocation(18, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:2: ( (p+= ID ( ',' p+= ID )* )? -> ^( PARAMS ( $p)* ) )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:4: (p+= ID ( ',' p+= ID )* )?
			{
			DebugLocation(19, 4);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:4: (p+= ID ( ',' p+= ID )* )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
			int LA2_0 = input.LA(1);

			if ((LA2_0==ID))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:5: p+= ID ( ',' p+= ID )*
				{
				DebugLocation(19, 6);
				p=(IToken)Match(input,ID,Follow._ID_in_params75);  
				stream_ID.Add(p);

				if (list_p==null) list_p=new List<IToken>();
				list_p.Add(p);

				DebugLocation(19, 11);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:11: ( ',' p+= ID )*
				try { DebugEnterSubRule(1);
				while (true)
				{
					int alt1=2;
					try { DebugEnterDecision(1, decisionCanBacktrack[1]);
					int LA1_0 = input.LA(1);

					if ((LA1_0==26))
					{
						alt1 = 1;
					}


					} finally { DebugExitDecision(1); }
					switch ( alt1 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Source\\chunky\\src\\Chunky\\chunky.g:19:12: ',' p+= ID
						{
						DebugLocation(19, 12);
						char_literal2=(IToken)Match(input,26,Follow._26_in_params78);  
						stream_26.Add(char_literal2);

						DebugLocation(19, 17);
						p=(IToken)Match(input,ID,Follow._ID_in_params82);  
						stream_ID.Add(p);

						if (list_p==null) list_p=new List<IToken>();
						list_p.Add(p);


						}
						break;

					default:
						goto loop1;
					}
				}

				loop1:
					;

				} finally { DebugExitSubRule(1); }


				}
				break;

			}
			} finally { DebugExitSubRule(2); }



			{
			// AST REWRITE
			// elements: p
			// token labels: 
			// rule labels: retval
			// token list labels: p
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleITokenStream stream_p=new RewriteRuleITokenStream(adaptor,"token p", list_p);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 20:3: -> ^( PARAMS ( $p)* )
			{
				DebugLocation(20, 6);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:20:6: ^( PARAMS ( $p)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(20, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(PARAMS, "PARAMS"), root_1);

				DebugLocation(20, 16);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:20:16: ( $p)*
				while ( stream_p.HasNext )
				{
					DebugLocation(20, 16);
					adaptor.AddChild(root_1, stream_p.NextNode());

				}
				stream_p.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("params", 2);
			LeaveRule("params", 2);
			LeaveRule_params();
	    }
	 	DebugLocation(21, 1);
		} finally { DebugExitRule(GrammarFileName, "params"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "params"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_func_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_func_expr() {}

	// $ANTLR start "func_expr"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:23:1: func_expr : FUNC ^ '(' ! params ')' ! block ;
	[GrammarRule("func_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_expr()
	{
		EnterRule_func_expr();
		EnterRule("func_expr", 3);
		TraceIn("func_expr", 3);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken FUNC3 = default(IToken);
	    IToken char_literal4 = default(IToken);
	    IToken char_literal6 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> params5 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> block7 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree FUNC3_tree = default(CommonTree);
	    CommonTree char_literal4_tree = default(CommonTree);
	    CommonTree char_literal6_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "func_expr");
		DebugLocation(23, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:24:2: ( FUNC ^ '(' ! params ')' ! block )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:24:4: FUNC ^ '(' ! params ')' ! block
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(24, 8);
			FUNC3=(IToken)Match(input,FUNC,Follow._FUNC_in_func_expr109); 
			FUNC3_tree = (CommonTree)adaptor.Create(FUNC3);
			root_0 = (CommonTree)adaptor.BecomeRoot(FUNC3_tree, root_0);

			DebugLocation(24, 13);
			char_literal4=(IToken)Match(input,22,Follow._22_in_func_expr112); 
			DebugLocation(24, 15);
			PushFollow(Follow._params_in_func_expr115);
			params5=@params();
			PopFollow();

			adaptor.AddChild(root_0, params5.Tree);
			DebugLocation(24, 25);
			char_literal6=(IToken)Match(input,23,Follow._23_in_func_expr117); 
			DebugLocation(24, 27);
			PushFollow(Follow._block_in_func_expr120);
			block7=block();
			PopFollow();

			adaptor.AddChild(root_0, block7.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_expr", 3);
			LeaveRule("func_expr", 3);
			LeaveRule_func_expr();
	    }
	 	DebugLocation(25, 1);
		} finally { DebugExitRule(GrammarFileName, "func_expr"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "func_expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_if_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_if_expr() {}

	// $ANTLR start "if_expr"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:27:1: if_expr : IF '(' cond= expr ')' if_body= block ( 'else' (else_body+= if_expr |else_body+= block ) )? -> ^( IF $cond ( $if_body)* ( $else_body)* ) ;
	[GrammarRule("if_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> if_expr()
	{
		EnterRule_if_expr();
		EnterRule("if_expr", 4);
		TraceIn("if_expr", 4);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken IF8 = default(IToken);
	    IToken char_literal9 = default(IToken);
	    IToken char_literal10 = default(IToken);
	    IToken string_literal11 = default(IToken);
	    List<CommonTree> list_else_body = null;
	    AstParserRuleReturnScope<CommonTree, IToken> cond = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> if_body = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> else_body = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    CommonTree IF8_tree = default(CommonTree);
	    CommonTree char_literal9_tree = default(CommonTree);
	    CommonTree char_literal10_tree = default(CommonTree);
	    CommonTree string_literal11_tree = default(CommonTree);
	    RewriteRuleITokenStream stream_22=new RewriteRuleITokenStream(adaptor,"token 22");
	    RewriteRuleITokenStream stream_23=new RewriteRuleITokenStream(adaptor,"token 23");
	    RewriteRuleITokenStream stream_36=new RewriteRuleITokenStream(adaptor,"token 36");
	    RewriteRuleITokenStream stream_IF=new RewriteRuleITokenStream(adaptor,"token IF");
	    RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
	    RewriteRuleSubtreeStream stream_if_expr=new RewriteRuleSubtreeStream(adaptor,"rule if_expr");
	    RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "if_expr");
		DebugLocation(27, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:28:2: ( IF '(' cond= expr ')' if_body= block ( 'else' (else_body+= if_expr |else_body+= block ) )? -> ^( IF $cond ( $if_body)* ( $else_body)* ) )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:28:4: IF '(' cond= expr ')' if_body= block ( 'else' (else_body+= if_expr |else_body+= block ) )?
			{
			DebugLocation(28, 4);
			IF8=(IToken)Match(input,IF,Follow._IF_in_if_expr131);  
			stream_IF.Add(IF8);

			DebugLocation(28, 7);
			char_literal9=(IToken)Match(input,22,Follow._22_in_if_expr133);  
			stream_22.Add(char_literal9);

			DebugLocation(28, 15);
			PushFollow(Follow._expr_in_if_expr137);
			cond=expr();
			PopFollow();

			stream_expr.Add(cond.Tree);
			DebugLocation(28, 21);
			char_literal10=(IToken)Match(input,23,Follow._23_in_if_expr139);  
			stream_23.Add(char_literal10);

			DebugLocation(28, 32);
			PushFollow(Follow._block_in_if_expr143);
			if_body=block();
			PopFollow();

			stream_block.Add(if_body.Tree);
			DebugLocation(29, 3);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:29:3: ( 'else' (else_body+= if_expr |else_body+= block ) )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			int LA4_0 = input.LA(1);

			if ((LA4_0==36))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:29:5: 'else' (else_body+= if_expr |else_body+= block )
				{
				DebugLocation(29, 5);
				string_literal11=(IToken)Match(input,36,Follow._36_in_if_expr149);  
				stream_36.Add(string_literal11);

				DebugLocation(29, 12);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:29:12: (else_body+= if_expr |else_body+= block )
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IF))
				{
					alt3 = 1;
				}
				else if ((LA3_0==37))
				{
					alt3 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:29:14: else_body+= if_expr
					{
					DebugLocation(29, 23);
					PushFollow(Follow._if_expr_in_if_expr155);
					else_body=if_expr();
					PopFollow();

					stream_if_expr.Add(else_body.Tree);
					if (list_else_body==null) list_else_body=new List<CommonTree>();
					list_else_body.Add(else_body.Tree);


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:30:8: else_body+= block
					{
					DebugLocation(30, 17);
					PushFollow(Follow._block_in_if_expr166);
					else_body=block();
					PopFollow();

					stream_block.Add(else_body.Tree);
					if (list_else_body==null) list_else_body=new List<CommonTree>();
					list_else_body.Add(else_body.Tree);


					}
					break;

				}
				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			} finally { DebugExitSubRule(4); }



			{
			// AST REWRITE
			// elements: IF, else_body, cond, if_body
			// token labels: 
			// rule labels: retval, if_body, cond
			// token list labels: 
			// rule list labels: else_body
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_if_body=new RewriteRuleSubtreeStream(adaptor,"rule if_body",if_body!=null?if_body.Tree:null);
			RewriteRuleSubtreeStream stream_cond=new RewriteRuleSubtreeStream(adaptor,"rule cond",cond!=null?cond.Tree:null);
			RewriteRuleSubtreeStream stream_else_body=new RewriteRuleSubtreeStream(adaptor,"token else_body",list_else_body);
			root_0 = (CommonTree)adaptor.Nil();
			// 34:3: -> ^( IF $cond ( $if_body)* ( $else_body)* )
			{
				DebugLocation(34, 6);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:34:6: ^( IF $cond ( $if_body)* ( $else_body)* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(34, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot(stream_IF.NextNode(), root_1);

				DebugLocation(34, 12);
				adaptor.AddChild(root_1, stream_cond.NextTree());
				DebugLocation(34, 18);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:34:18: ( $if_body)*
				while ( stream_if_body.HasNext )
				{
					DebugLocation(34, 18);
					adaptor.AddChild(root_1, stream_if_body.NextTree());

				}
				stream_if_body.Reset();
				DebugLocation(34, 28);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:34:28: ( $else_body)*
				while ( stream_else_body.HasNext )
				{
					DebugLocation(34, 28);
					adaptor.AddChild(root_1, stream_else_body.NextTree());

				}
				stream_else_body.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("if_expr", 4);
			LeaveRule("if_expr", 4);
			LeaveRule_if_expr();
	    }
	 	DebugLocation(35, 1);
		} finally { DebugExitRule(GrammarFileName, "if_expr"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "if_expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_term() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_term() {}

	// $ANTLR start "term"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:37:1: term : ( ID | '(' ! expr ')' !| INT | FLOAT | STRING | if_expr | func_expr );
	[GrammarRule("term")]
	private AstParserRuleReturnScope<CommonTree, IToken> term()
	{
		EnterRule_term();
		EnterRule("term", 5);
		TraceIn("term", 5);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken ID12 = default(IToken);
	    IToken char_literal13 = default(IToken);
	    IToken char_literal15 = default(IToken);
	    IToken INT16 = default(IToken);
	    IToken FLOAT17 = default(IToken);
	    IToken STRING18 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expr14 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> if_expr19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> func_expr20 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree ID12_tree = default(CommonTree);
	    CommonTree char_literal13_tree = default(CommonTree);
	    CommonTree char_literal15_tree = default(CommonTree);
	    CommonTree INT16_tree = default(CommonTree);
	    CommonTree FLOAT17_tree = default(CommonTree);
	    CommonTree STRING18_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(37, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:37:5: ( ID | '(' ! expr ')' !| INT | FLOAT | STRING | if_expr | func_expr )
			int alt5=7;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			switch (input.LA(1))
			{
			case ID:
				{
				alt5 = 1;
				}
				break;
			case 22:
				{
				alt5 = 2;
				}
				break;
			case INT:
				{
				alt5 = 3;
				}
				break;
			case FLOAT:
				{
				alt5 = 4;
				}
				break;
			case STRING:
				{
				alt5 = 5;
				}
				break;
			case IF:
				{
				alt5 = 6;
				}
				break;
			case FUNC:
				{
				alt5 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:37:7: ID
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(37, 7);
				ID12=(IToken)Match(input,ID,Follow._ID_in_term208); 
				ID12_tree = (CommonTree)adaptor.Create(ID12);
				adaptor.AddChild(root_0, ID12_tree);


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:38:4: '(' ! expr ')' !
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(38, 7);
				char_literal13=(IToken)Match(input,22,Follow._22_in_term213); 
				DebugLocation(38, 9);
				PushFollow(Follow._expr_in_term216);
				expr14=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr14.Tree);
				DebugLocation(38, 17);
				char_literal15=(IToken)Match(input,23,Follow._23_in_term218); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:39:4: INT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(39, 4);
				INT16=(IToken)Match(input,INT,Follow._INT_in_term224); 
				INT16_tree = (CommonTree)adaptor.Create(INT16);
				adaptor.AddChild(root_0, INT16_tree);


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:40:4: FLOAT
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(40, 4);
				FLOAT17=(IToken)Match(input,FLOAT,Follow._FLOAT_in_term229); 
				FLOAT17_tree = (CommonTree)adaptor.Create(FLOAT17);
				adaptor.AddChild(root_0, FLOAT17_tree);


				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:41:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(41, 4);
				STRING18=(IToken)Match(input,STRING,Follow._STRING_in_term234); 
				STRING18_tree = (CommonTree)adaptor.Create(STRING18);
				adaptor.AddChild(root_0, STRING18_tree);


				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:42:4: if_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(42, 4);
				PushFollow(Follow._if_expr_in_term239);
				if_expr19=if_expr();
				PopFollow();

				adaptor.AddChild(root_0, if_expr19.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:43:4: func_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(43, 4);
				PushFollow(Follow._func_expr_in_term244);
				func_expr20=func_expr();
				PopFollow();

				adaptor.AddChild(root_0, func_expr20.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 5);
			LeaveRule("term", 5);
			LeaveRule_term();
	    }
	 	DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "term"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_dot() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_dot() {}

	// $ANTLR start "dot"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:46:1: dot : term ( DOT ^ ID )* ( '=' ^ expr )? ;
	[GrammarRule("dot")]
	private AstParserRuleReturnScope<CommonTree, IToken> dot()
	{
		EnterRule_dot();
		EnterRule("dot", 6);
		TraceIn("dot", 6);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken DOT22 = default(IToken);
	    IToken ID23 = default(IToken);
	    IToken char_literal24 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> term21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> expr25 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree DOT22_tree = default(CommonTree);
	    CommonTree ID23_tree = default(CommonTree);
	    CommonTree char_literal24_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "dot");
		DebugLocation(46, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:2: ( term ( DOT ^ ID )* ( '=' ^ expr )? )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:4: term ( DOT ^ ID )* ( '=' ^ expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(47, 4);
			PushFollow(Follow._term_in_dot255);
			term21=term();
			PopFollow();

			adaptor.AddChild(root_0, term21.Tree);
			DebugLocation(47, 9);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:9: ( DOT ^ ID )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, decisionCanBacktrack[6]);
				int LA6_0 = input.LA(1);

				if ((LA6_0==DOT))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:10: DOT ^ ID
					{
					DebugLocation(47, 13);
					DOT22=(IToken)Match(input,DOT,Follow._DOT_in_dot258); 
					DOT22_tree = (CommonTree)adaptor.Create(DOT22);
					root_0 = (CommonTree)adaptor.BecomeRoot(DOT22_tree, root_0);

					DebugLocation(47, 15);
					ID23=(IToken)Match(input,ID,Follow._ID_in_dot261); 
					ID23_tree = (CommonTree)adaptor.Create(ID23);
					adaptor.AddChild(root_0, ID23_tree);


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(47, 20);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:20: ( '=' ^ expr )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			int LA7_0 = input.LA(1);

			if ((LA7_0==32))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:47:21: '=' ^ expr
				{
				DebugLocation(47, 24);
				char_literal24=(IToken)Match(input,32,Follow._32_in_dot266); 
				char_literal24_tree = (CommonTree)adaptor.Create(char_literal24);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal24_tree, root_0);

				DebugLocation(47, 26);
				PushFollow(Follow._expr_in_dot269);
				expr25=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr25.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(7); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("dot", 6);
			LeaveRule("dot", 6);
			LeaveRule_dot();
	    }
	 	DebugLocation(48, 1);
		} finally { DebugExitRule(GrammarFileName, "dot"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "dot"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_args() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_args() {}

	// $ANTLR start "args"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:1: args : (b= expr ( ',' b= expr )* )? -> ^( ARGS $b) ;
	[GrammarRule("args")]
	private AstParserRuleReturnScope<CommonTree, IToken> args()
	{
		EnterRule_args();
		EnterRule("args", 7);
		TraceIn("args", 7);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal26 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree char_literal26_tree = default(CommonTree);
	    RewriteRuleITokenStream stream_26=new RewriteRuleITokenStream(adaptor,"token 26");
	    RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "args");
		DebugLocation(50, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:5: ( (b= expr ( ',' b= expr )* )? -> ^( ARGS $b) )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:7: (b= expr ( ',' b= expr )* )?
			{
			DebugLocation(50, 7);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:7: (b= expr ( ',' b= expr )* )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if (((LA9_0>=FLOAT && LA9_0<=INT)||LA9_0==STRING||LA9_0==18||LA9_0==22))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:8: b= expr ( ',' b= expr )*
				{
				DebugLocation(50, 9);
				PushFollow(Follow._expr_in_args283);
				b=expr();
				PopFollow();

				stream_expr.Add(b.Tree);
				DebugLocation(50, 15);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:15: ( ',' b= expr )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, decisionCanBacktrack[8]);
					int LA8_0 = input.LA(1);

					if ((LA8_0==26))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Source\\chunky\\src\\Chunky\\chunky.g:50:16: ',' b= expr
						{
						DebugLocation(50, 16);
						char_literal26=(IToken)Match(input,26,Follow._26_in_args286);  
						stream_26.Add(char_literal26);

						DebugLocation(50, 21);
						PushFollow(Follow._expr_in_args290);
						b=expr();
						PopFollow();

						stream_expr.Add(b.Tree);

						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: b
			// token labels: 
			// rule labels: retval, b
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 51:3: -> ^( ARGS $b)
			{
				DebugLocation(51, 6);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:51:6: ^( ARGS $b)
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(51, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(ARGS, "ARGS"), root_1);

				DebugLocation(51, 14);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("args", 7);
			LeaveRule("args", 7);
			LeaveRule_args();
	    }
	 	DebugLocation(52, 1);
		} finally { DebugExitRule(GrammarFileName, "args"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "args"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_call() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_call() {}

	// $ANTLR start "call"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:54:1: call : (t= dot -> $t) ( '(' args ')' -> ^( CALL $call args ) )* ;
	[GrammarRule("call")]
	private AstParserRuleReturnScope<CommonTree, IToken> call()
	{
		EnterRule_call();
		EnterRule("call", 8);
		TraceIn("call", 8);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal27 = default(IToken);
	    IToken char_literal29 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> t = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> args28 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree char_literal27_tree = default(CommonTree);
	    CommonTree char_literal29_tree = default(CommonTree);
	    RewriteRuleITokenStream stream_22=new RewriteRuleITokenStream(adaptor,"token 22");
	    RewriteRuleITokenStream stream_23=new RewriteRuleITokenStream(adaptor,"token 23");
	    RewriteRuleSubtreeStream stream_args=new RewriteRuleSubtreeStream(adaptor,"rule args");
	    RewriteRuleSubtreeStream stream_dot=new RewriteRuleSubtreeStream(adaptor,"rule dot");
		try { DebugEnterRule(GrammarFileName, "call");
		DebugLocation(54, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:54:5: ( (t= dot -> $t) ( '(' args ')' -> ^( CALL $call args ) )* )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:54:7: (t= dot -> $t) ( '(' args ')' -> ^( CALL $call args ) )*
			{
			DebugLocation(54, 7);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:54:7: (t= dot -> $t)
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:54:8: t= dot
			{
			DebugLocation(54, 9);
			PushFollow(Follow._dot_in_call317);
			t=dot();
			PopFollow();

			stream_dot.Add(t.Tree);


			{
			// AST REWRITE
			// elements: t
			// token labels: 
			// rule labels: retval, t
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"rule t",t!=null?t.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 54:13: -> $t
			{
				DebugLocation(54, 16);
				adaptor.AddChild(root_0, stream_t.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(55, 3);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:55:3: ( '(' args ')' -> ^( CALL $call args ) )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
				int LA10_0 = input.LA(1);

				if ((LA10_0==22))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:56:4: '(' args ')'
					{
					DebugLocation(56, 4);
					char_literal27=(IToken)Match(input,22,Follow._22_in_call330);  
					stream_22.Add(char_literal27);

					DebugLocation(56, 8);
					PushFollow(Follow._args_in_call332);
					args28=args();
					PopFollow();

					stream_args.Add(args28.Tree);
					DebugLocation(56, 13);
					char_literal29=(IToken)Match(input,23,Follow._23_in_call334);  
					stream_23.Add(char_literal29);



					{
					// AST REWRITE
					// elements: args, call
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 57:4: -> ^( CALL $call args )
					{
						DebugLocation(57, 7);
						// C:\\Source\\chunky\\src\\Chunky\\chunky.g:57:7: ^( CALL $call args )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(57, 9);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(CALL, "CALL"), root_1);

						DebugLocation(57, 15);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(57, 20);
						adaptor.AddChild(root_1, stream_args.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("call", 8);
			LeaveRule("call", 8);
			LeaveRule_call();
	    }
	 	DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "call"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "call"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_not() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_not() {}

	// $ANTLR start "not"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:61:1: not : ( '!' ^)? call ;
	[GrammarRule("not")]
	private AstParserRuleReturnScope<CommonTree, IToken> not()
	{
		EnterRule_not();
		EnterRule("not", 9);
		TraceIn("not", 9);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal30 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> call31 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree char_literal30_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "not");
		DebugLocation(61, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:61:5: ( ( '!' ^)? call )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:61:7: ( '!' ^)? call
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(61, 10);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:61:10: ( '!' ^)?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==18))
			{
				alt11 = 1;
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:61:10: '!' ^
				{
				DebugLocation(61, 10);
				char_literal30=(IToken)Match(input,18,Follow._18_in_not363); 
				char_literal30_tree = (CommonTree)adaptor.Create(char_literal30);
				root_0 = (CommonTree)adaptor.BecomeRoot(char_literal30_tree, root_0);


				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(61, 13);
			PushFollow(Follow._call_in_not367);
			call31=call();
			PopFollow();

			adaptor.AddChild(root_0, call31.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("not", 9);
			LeaveRule("not", 9);
			LeaveRule_not();
	    }
	 	DebugLocation(62, 1);
		} finally { DebugExitRule(GrammarFileName, "not"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "not"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_mul() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_mul() {}

	// $ANTLR start "mul"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:64:1: mul : not ( ( '*' | '/' ) ^ not )* ;
	[GrammarRule("mul")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul()
	{
		EnterRule_mul();
		EnterRule("mul", 10);
		TraceIn("mul", 10);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set33 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> not32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> not34 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set33_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "mul");
		DebugLocation(64, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:64:5: ( not ( ( '*' | '/' ) ^ not )* )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:64:7: not ( ( '*' | '/' ) ^ not )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(64, 7);
			PushFollow(Follow._not_in_mul377);
			not32=not();
			PopFollow();

			adaptor.AddChild(root_0, not32.Tree);
			DebugLocation(64, 11);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:64:11: ( ( '*' | '/' ) ^ not )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
				int LA12_0 = input.LA(1);

				if ((LA12_0==24||LA12_0==28))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:64:12: ( '*' | '/' ) ^ not
					{
					DebugLocation(64, 23);

					set33=(IToken)input.LT(1);
					set33=(IToken)input.LT(1);
					if (input.LA(1)==24||input.LA(1)==28)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set33), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(64, 25);
					PushFollow(Follow._not_in_mul389);
					not34=not();
					PopFollow();

					adaptor.AddChild(root_0, not34.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul", 10);
			LeaveRule("mul", 10);
			LeaveRule_mul();
	    }
	 	DebugLocation(65, 1);
		} finally { DebugExitRule(GrammarFileName, "mul"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "mul"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_add() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_add() {}

	// $ANTLR start "add"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:67:1: add : mul ( ( '+' | '-' ) ^ mul )* ;
	[GrammarRule("add")]
	private AstParserRuleReturnScope<CommonTree, IToken> add()
	{
		EnterRule_add();
		EnterRule("add", 11);
		TraceIn("add", 11);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set36 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> mul35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> mul37 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set36_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "add");
		DebugLocation(67, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:67:5: ( mul ( ( '+' | '-' ) ^ mul )* )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:67:7: mul ( ( '+' | '-' ) ^ mul )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(67, 7);
			PushFollow(Follow._mul_in_add401);
			mul35=mul();
			PopFollow();

			adaptor.AddChild(root_0, mul35.Tree);
			DebugLocation(67, 11);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:67:11: ( ( '+' | '-' ) ^ mul )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, decisionCanBacktrack[13]);
				int LA13_0 = input.LA(1);

				if ((LA13_0==25||LA13_0==27))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:67:12: ( '+' | '-' ) ^ mul
					{
					DebugLocation(67, 23);

					set36=(IToken)input.LT(1);
					set36=(IToken)input.LT(1);
					if (input.LA(1)==25||input.LA(1)==27)
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set36), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(67, 25);
					PushFollow(Follow._mul_in_add413);
					mul37=mul();
					PopFollow();

					adaptor.AddChild(root_0, mul37.Tree);

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add", 11);
			LeaveRule("add", 11);
			LeaveRule_add();
	    }
	 	DebugLocation(68, 1);
		} finally { DebugExitRule(GrammarFileName, "add"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "add"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_comp() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_comp() {}

	// $ANTLR start "comp"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:70:1: comp : add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) ^ add )* ;
	[GrammarRule("comp")]
	private AstParserRuleReturnScope<CommonTree, IToken> comp()
	{
		EnterRule_comp();
		EnterRule("comp", 12);
		TraceIn("comp", 12);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set39 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> add38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> add40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set39_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "comp");
		DebugLocation(70, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:70:5: ( add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) ^ add )* )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:70:7: add ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) ^ add )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(70, 7);
			PushFollow(Follow._add_in_comp424);
			add38=add();
			PopFollow();

			adaptor.AddChild(root_0, add38.Tree);
			DebugLocation(70, 11);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:70:11: ( ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) ^ add )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, decisionCanBacktrack[14]);
				int LA14_0 = input.LA(1);

				if ((LA14_0==19||(LA14_0>=30 && LA14_0<=31)||(LA14_0>=33 && LA14_0<=35)))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:70:12: ( '==' | '<' | '<=' | '>=' | '>' | '!=' ) ^ add
					{
					DebugLocation(70, 51);

					set39=(IToken)input.LT(1);
					set39=(IToken)input.LT(1);
					if (input.LA(1)==19||(input.LA(1)>=30 && input.LA(1)<=31)||(input.LA(1)>=33 && input.LA(1)<=35))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set39), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(70, 53);
					PushFollow(Follow._add_in_comp452);
					add40=add();
					PopFollow();

					adaptor.AddChild(root_0, add40.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("comp", 12);
			LeaveRule("comp", 12);
			LeaveRule_comp();
	    }
	 	DebugLocation(71, 1);
		} finally { DebugExitRule(GrammarFileName, "comp"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "comp"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_bool() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_bool() {}

	// $ANTLR start "bool"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:73:1: bool : comp ( ( '&' | '&&' | '|' | '||' ) ^ comp )* ;
	[GrammarRule("bool")]
	private AstParserRuleReturnScope<CommonTree, IToken> @bool()
	{
		EnterRule_bool();
		EnterRule("bool", 13);
		TraceIn("bool", 13);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken set42 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> comp41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
	    AstParserRuleReturnScope<CommonTree, IToken> comp43 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree set42_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "bool");
		DebugLocation(73, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:73:5: ( comp ( ( '&' | '&&' | '|' | '||' ) ^ comp )* )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:73:7: comp ( ( '&' | '&&' | '|' | '||' ) ^ comp )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(73, 7);
			PushFollow(Follow._comp_in_bool463);
			comp41=comp();
			PopFollow();

			adaptor.AddChild(root_0, comp41.Tree);
			DebugLocation(73, 12);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:73:12: ( ( '&' | '&&' | '|' | '||' ) ^ comp )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, decisionCanBacktrack[15]);
				int LA15_0 = input.LA(1);

				if (((LA15_0>=20 && LA15_0<=21)||(LA15_0>=38 && LA15_0<=39)))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:73:13: ( '&' | '&&' | '|' | '||' ) ^ comp
					{
					DebugLocation(73, 38);

					set42=(IToken)input.LT(1);
					set42=(IToken)input.LT(1);
					if ((input.LA(1)>=20 && input.LA(1)<=21)||(input.LA(1)>=38 && input.LA(1)<=39))
					{
						input.Consume();
						root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set42), root_0);
						state.errorRecovery=false;
					}
					else
					{
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}

					DebugLocation(73, 40);
					PushFollow(Follow._comp_in_bool483);
					comp43=comp();
					PopFollow();

					adaptor.AddChild(root_0, comp43.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bool", 13);
			LeaveRule("bool", 13);
			LeaveRule_bool();
	    }
	 	DebugLocation(74, 1);
		} finally { DebugExitRule(GrammarFileName, "bool"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "bool"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}

	// $ANTLR start "expr"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:76:1: expr : bool ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 14);
		TraceIn("expr", 14);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    AstParserRuleReturnScope<CommonTree, IToken> bool44 = default(AstParserRuleReturnScope<CommonTree, IToken>);


		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(76, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:76:5: ( bool )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:76:7: bool
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(76, 7);
			PushFollow(Follow._bool_in_expr494);
			bool44=@bool();
			PopFollow();

			adaptor.AddChild(root_0, bool44.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 14);
			LeaveRule("expr", 14);
			LeaveRule_expr();
	    }
	 	DebugLocation(77, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "expr"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprs() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprs() {}

	// $ANTLR start "exprs"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:79:1: exprs : ( ( expr )? ';' !)+ ;
	[GrammarRule("exprs")]
	private AstParserRuleReturnScope<CommonTree, IToken> exprs()
	{
		EnterRule_exprs();
		EnterRule("exprs", 15);
		TraceIn("exprs", 15);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal46 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> expr45 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree char_literal46_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "exprs");
		DebugLocation(79, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:2: ( ( ( expr )? ';' !)+ )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:4: ( ( expr )? ';' !)+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(80, 4);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:4: ( ( expr )? ';' !)+
			int cnt17=0;
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, decisionCanBacktrack[17]);
				int LA17_0 = input.LA(1);

				if (((LA17_0>=FLOAT && LA17_0<=INT)||LA17_0==STRING||LA17_0==18||LA17_0==22||LA17_0==29))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:5: ( expr )? ';' !
					{
					DebugLocation(80, 5);
					// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:5: ( expr )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, decisionCanBacktrack[16]);
					int LA16_0 = input.LA(1);

					if (((LA16_0>=FLOAT && LA16_0<=INT)||LA16_0==STRING||LA16_0==18||LA16_0==22))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Source\\chunky\\src\\Chunky\\chunky.g:80:5: expr
						{
						DebugLocation(80, 5);
						PushFollow(Follow._expr_in_exprs506);
						expr45=expr();
						PopFollow();

						adaptor.AddChild(root_0, expr45.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(80, 14);
					char_literal46=(IToken)Match(input,29,Follow._29_in_exprs509); 

					}
					break;

				default:
					if (cnt17 >= 1)
						goto loop17;

					EarlyExitException eee17 = new EarlyExitException( 17, input );
					DebugRecognitionException(eee17);
					throw eee17;
				}
				cnt17++;
			}
			loop17:
				;

			} finally { DebugExitSubRule(17); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exprs", 15);
			LeaveRule("exprs", 15);
			LeaveRule_exprs();
	    }
	 	DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "exprs"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "exprs"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_block() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_block() {}

	// $ANTLR start "block"
	// C:\\Source\\chunky\\src\\Chunky\\chunky.g:83:1: block : '{' ( exprs )? '}' -> ^( BLOCK ( exprs )? ) ;
	[GrammarRule("block")]
	private AstParserRuleReturnScope<CommonTree, IToken> block()
	{
		EnterRule_block();
		EnterRule("block", 16);
		TraceIn("block", 16);
	    AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    CommonTree root_0 = default(CommonTree);

	    IToken char_literal47 = default(IToken);
	    IToken char_literal49 = default(IToken);
	    AstParserRuleReturnScope<CommonTree, IToken> exprs48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

	    CommonTree char_literal47_tree = default(CommonTree);
	    CommonTree char_literal49_tree = default(CommonTree);
	    RewriteRuleITokenStream stream_40=new RewriteRuleITokenStream(adaptor,"token 40");
	    RewriteRuleITokenStream stream_37=new RewriteRuleITokenStream(adaptor,"token 37");
	    RewriteRuleSubtreeStream stream_exprs=new RewriteRuleSubtreeStream(adaptor,"rule exprs");
		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(83, 1);
		if (RuleLevel == 0)
			DebugListener.Commence();
		IncRuleLevel();
		try
		{
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:84:2: ( '{' ( exprs )? '}' -> ^( BLOCK ( exprs )? ) )
			DebugEnterAlt(1);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:84:4: '{' ( exprs )? '}'
			{
			DebugLocation(84, 4);
			char_literal47=(IToken)Match(input,37,Follow._37_in_block523);  
			stream_37.Add(char_literal47);

			DebugLocation(84, 8);
			// C:\\Source\\chunky\\src\\Chunky\\chunky.g:84:8: ( exprs )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, decisionCanBacktrack[18]);
			int LA18_0 = input.LA(1);

			if (((LA18_0>=FLOAT && LA18_0<=INT)||LA18_0==STRING||LA18_0==18||LA18_0==22||LA18_0==29))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:84:8: exprs
				{
				DebugLocation(84, 8);
				PushFollow(Follow._exprs_in_block525);
				exprs48=exprs();
				PopFollow();

				stream_exprs.Add(exprs48.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(18); }

			DebugLocation(84, 15);
			char_literal49=(IToken)Match(input,40,Follow._40_in_block528);  
			stream_40.Add(char_literal49);



			{
			// AST REWRITE
			// elements: exprs
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 85:3: -> ^( BLOCK ( exprs )? )
			{
				DebugLocation(85, 6);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:85:6: ^( BLOCK ( exprs )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(85, 8);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(BLOCK, "BLOCK"), root_1);

				DebugLocation(85, 14);
				// C:\\Source\\chunky\\src\\Chunky\\chunky.g:85:14: ( exprs )?
				if (stream_exprs.HasNext)
				{
					DebugLocation(85, 14);
					adaptor.AddChild(root_1, stream_exprs.NextTree());

				}
				stream_exprs.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("block", 16);
			LeaveRule("block", 16);
			LeaveRule_block();
	    }
	 	DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		DecRuleLevel();
		if (RuleLevel == 0)
			DebugListener.Terminate();
		return retval;

	}
	// $ANTLR end "block"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _exprs_in_program61 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_params75 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_params78 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_params82 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _FUNC_in_func_expr109 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_func_expr112 = new BitSet(new ulong[]{0x800800UL});
		public static readonly BitSet _params_in_func_expr115 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_func_expr117 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _block_in_func_expr120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_if_expr131 = new BitSet(new ulong[]{0x400000UL});
		public static readonly BitSet _22_in_if_expr133 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _expr_in_if_expr137 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_if_expr139 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _block_in_if_expr143 = new BitSet(new ulong[]{0x1000000002UL});
		public static readonly BitSet _36_in_if_expr149 = new BitSet(new ulong[]{0x2000001000UL});
		public static readonly BitSet _if_expr_in_if_expr155 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_if_expr166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_term208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_term213 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _expr_in_term216 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_term218 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INT_in_term224 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_term229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _if_expr_in_term239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_expr_in_term244 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_dot255 = new BitSet(new ulong[]{0x100000102UL});
		public static readonly BitSet _DOT_in_dot258 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _ID_in_dot261 = new BitSet(new ulong[]{0x100000102UL});
		public static readonly BitSet _32_in_dot266 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _expr_in_dot269 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_args283 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _26_in_args286 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _expr_in_args290 = new BitSet(new ulong[]{0x4000002UL});
		public static readonly BitSet _dot_in_call317 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _22_in_call330 = new BitSet(new ulong[]{0xC53E00UL});
		public static readonly BitSet _args_in_call332 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _23_in_call334 = new BitSet(new ulong[]{0x400002UL});
		public static readonly BitSet _18_in_not363 = new BitSet(new ulong[]{0x413E00UL});
		public static readonly BitSet _call_in_not367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _not_in_mul377 = new BitSet(new ulong[]{0x11000002UL});
		public static readonly BitSet _set_in_mul380 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _not_in_mul389 = new BitSet(new ulong[]{0x11000002UL});
		public static readonly BitSet _mul_in_add401 = new BitSet(new ulong[]{0xA000002UL});
		public static readonly BitSet _set_in_add404 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _mul_in_add413 = new BitSet(new ulong[]{0xA000002UL});
		public static readonly BitSet _add_in_comp424 = new BitSet(new ulong[]{0xEC0080002UL});
		public static readonly BitSet _set_in_comp427 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _add_in_comp452 = new BitSet(new ulong[]{0xEC0080002UL});
		public static readonly BitSet _comp_in_bool463 = new BitSet(new ulong[]{0xC000300002UL});
		public static readonly BitSet _set_in_bool466 = new BitSet(new ulong[]{0x453E00UL});
		public static readonly BitSet _comp_in_bool483 = new BitSet(new ulong[]{0xC000300002UL});
		public static readonly BitSet _bool_in_expr494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_exprs506 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _29_in_exprs509 = new BitSet(new ulong[]{0x20453E02UL});
		public static readonly BitSet _37_in_block523 = new BitSet(new ulong[]{0x10020453E00UL});
		public static readonly BitSet _exprs_in_block525 = new BitSet(new ulong[]{0x10000000000UL});
		public static readonly BitSet _40_in_block528 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
